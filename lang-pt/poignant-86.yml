    - >
      h3. Tab Completion


      One feature of Irb which is rarely mentioned is its beneficial tab completion.  And it's
      a bit of a taboo topic at the moment, since getting it to work on Windows is a slight horror.
      (No, don't be afraid.  All at once now, look to your right.)


      If you're on Linux or FreeBSD, the tab completion should work right off.  And if you're
      using OS X, you should be sure you're upgrade to the latest 1.8 and when run Irb, use:


      <pre class="text">
       irb --readline -r irb/completion
      </pre> 


      Basically, when you hit _Tab_, Irb will take a guess at what you're trying to type.
      Try typing: @[].col@ and hit _Tab_.  Irb will finish it.  @[].collect@ and it leaves your
      cursor at the end so you can add further.


      If there are several matches, just hitting _Tab_ will do nothing.  But hit it twice
      and Ruby will give you a complete list of possible matches.


      This is great if you just want to see all the methods for a certain object.  Type in any
      number, a dot, and use _Tab_.


      <pre class="text">
        >> 42.
                      42.floor                   42.next                    42.step
        42.__id__     42.freeze                  42.nil?                    42.succ
        42.__send__   42.frozen?                 42.nonzero?                42.taint
        42.abs        42.hash                    42.object_id               42.tainted?
        42.between?   42.id                      42.prec                    42.times
        42.ceil       42.id2name                 42.prec_f                  42.to_f
        42.chr        42.inspect                 42.prec_i                  42.to_i
        42.class      42.instance_eval           42.private_methods         42.to_int
        42.clone      42.instance_of?            42.protected_methods       42.to_s
        42.coerce     42.instance_variable_get   42.public_methods          42.to_sym
        42.display    42.instance_variable_set   42.quo                     42.truncate
        42.div        42.instance_variables      42.remainder               42.type
        42.divmod     42.integer?                42.respond_to?             42.untaint
        42.downto     42.is_a?                   42.round                   42.upto
        42.dup        42.kind_of?                42.send                    42.zero?
        42.eql?       42.method                  42.singleton_method_added  
        42.equal?     42.methods                 42.singleton_methods       
        42.extend     42.modulo                  42.size  
      </pre>


      Now, trying typing @Kernel::@ and then _Tab_.  All the core methods.  Don't ever forget this
      and use it all the time.


      !i/tigers.vest-3.gif(Except the robot flew away and the ice gun went on and on...)!


      Okay, one last thing and then I'll quit bugging you with all this great technology.
      But I have to say it loud, so take cover!  I'm across the world here, folks, but the
      volume comes down from the sky -- a bold, red crescendo of --


      h1={font-size:84pt; color:#FDD; line-height: 120%}. ((%{color:#A53}ri%))


      h3={color: #300}. (Ruby's Own 411 or 555-1212 or _Yes, Operator, Get Belgrade on the Line_ -- I'll 
      Be Right Here -- Just Plain Hammering The Pound Key Until Someone Picks Up...)


      And Ri picks up the line.  "This is Ri.  Class and colon, please."


      You rush in, "This is an instance method, Operator.  Enumerable#zip."

  
      <pre class="text">
       ri Enumerable#zip
      </pre>


      Without delay, right up on your teletype display (so swiftly that even the cat perched
      atop cranes his neck around, gapes and hands it the royal cup _Most Blatantly Great
      Thing Since Michael Dorn_):


      <pre class="text">
       --------------------------------------------------------- Enumerable#zip
            enum.zip(arg, ...)                   => array
            enum.zip(arg, ...) {|arr| block }    => nil
       ------------------------------------------------------------------------
            Converts any arguments to arrays, then merges elements of _enum_
            with corresponding elements from each argument. This generates a
            sequence of +enum#size+ _n_-element arrays, where _n_ is one more
            that the count of arguments. If the size of any argument is less
            than +enum#size+, +nil+ values are supplied. If a block given, it
            is invoked for each output array, otherwise an array of arrays is
            returned.

               a = [ 4, 5, 6 ]
               b = [ 7, 8, 9 ]

               (1..3).zip(a, b)      #=> [[1, 4, 7], [2, 5, 8], [3, 6, 9]]
               "cat\ndog".zip([1])   #=> [["cat\n", 1], ["dog", nil]]
               (1..3).zip            #=> [[1], [2], [3]]
      </pre>


      It's an unabridged Ruby dictionary servo -- the Power of Just Asking is at your
      fingertips -- _don't tell me you've never heard of this no-money-down 
      lifetime-supply-of-proper-explanations!_


      To get an explanation of any class, along with a complete directory to all of its
      methods, all in a very soothing voice fit for calming any of you panicking cosmonauts 
      out there fighting the pull of some zero-tolerance tractor beam, just use at your
      command shell: @ri Class@.


      But for help on class methods, you cuff on: @ri Class::method@.


      Though instance methods use a pound key rather than a dot.  (Since the dot can mean class *or*
      instance methods.)  I mean: @ri Class#method@.


      The full spread of classes, a full list from the Very Top down to the Earth's core, can be
      achieved with @ri -c@.


      And beyond text, you can make HTML: @ri -Tf html String#gsub > gsub.html@.


      *Or show colory ANSI: @ri -Tf ansi String#gsub@.*  And this is last and best.


      h3. Into the Ri Switchboard


      Behind Ri sings a chorus of human voices, primarily Dave Thomas, an author of _Programming
      Ruby_, and absolutely the American foster parent of Ruby.  Many of these elaborate
      spiels from Ri are straight from the references of _Programming Ruby_.  Don't forget
      to thank Dave periodically.


      Ri culls its lush information set from the very code that Ruby is built from.  In each
      of the files of code back in the Ruby Headquarter's file cabinet, detailed comments
      describe everything in sight.


      In Ruby's @date@ class, here we have such commented methods:


      <pre>
       # Get the time of this date as [hours, minutes, seconds,
       # fraction_of_a_second]
       def time() self.class.day_fraction_to_time(day_fraction) end
       
       # Get the hour of this date.
       def hour() time[0] end
         
       # Get the minute of this date.
       def min() time[1] end
      </pre>


      The comments show up in Ri.  We type: @ri Date#time@.


      <pre class="text">
       -------------------------------------------------------------- Date#time
            time()
       ------------------------------------------------------------------------
            Get the time of this date as [hours, minutes, seconds,
            fraction_of_a_second]

      </pre>


      Ri figures out much of how a method works, although it expects coders to
      write a brief description in the comments just before a method or class definition.
      I would suggest that whenever you write a method, add a brief
      description in the comments before that method.  In time, you can generate
      Ri documentation for that method.


      You can also use a few special characters to enhance your description.  For
      example, if you indent a paragraph and use an asterisk @*@ or a dash @-@
      just before the letters of the first sentence, the paragraph will be recognized
      as a list item.  Then, if your description needs to be converted to HTML, you'll
      see the list item appear as an HTML unordered list.


      <pre>
       # Get the time of this date as an Array of:
       # * hours
       # * minutes
       # * seconds
       # * fraction_of_a_second
       def time() self.class.day_fraction_to_time(day_fraction) end
      </pre>


      Other rules as well:  Lists which start with digits followed by periods are
      recognized as numbered lists.  Emphasized words are surrounded by underscores,
      bold words by asterisks, code words by plus signs.  Examples are simply blocks
      of text indented a few spaces.  All of these rules together are called RDoc.


      Here's a bit of RDoc from the @initialize@ method in one of my projects
      called RedCloth.  Notice the indented example as well as the Ruby class
      and method names flanked with plusses.


      <pre>
       #
       # Returns a new RedCloth object, based on +String+ and
       # enforcing all the included +restrictions+.
       #
       #   r = RedCloth.new( "h1. A <b>bold</b> man", [:filter_html] )
       #   r.to_html
       #     #=>"<h1>A &lt;b&gt;bold&lt;/b&gt; man</h1>"
       #
       def initialize( string, restrictions = [] )
           @lite = false
           restrictions.each { |r| method( "#{ r }=" ).call( true ) }
           super( string )
       end
      </pre>


      For the full set of RDoc rules see the *Markup* section of the 
      "README":http://rdoc.sourceforge.net/doc/files/README.html.


      h3. Pushing Out Your Own Ri


      Ri doesn't automatically read your files for you, though.  You've got to push it along,
      show it the way.  Change to the directory of the code you'd like to scan.  Then, use
      the RDoc tool to make it happen.


      <pre class="text">
       cd ~/cvs/your-code
       rdoc --ri-site
      </pre>


      Now, try using @ri YourClass@ to ensure all your descriptions are showing up properly.
      If you want to make HTML documentation, try this:


      <pre class="text">
       cd ~/cvs/your-code
       rdoc
      </pre>


      The @~/cvs/your-code@ directory should now also have a fresh @doc@ directory containing
      HTML documentation for all of your classes.  View @index.html@ for the pleasant news.


      Well then.  Your hands are in it all now.  Welcome to Ruby.


      !i/tigers.vest-4.gif(The tiger finds a new home and learns to eventually move on.)!


#
#        Just as the sun goes down and I have to call him Paij-plo, I check the time.
#
#
#        bq. @puts Time.now@
#
#        which prints: @Sun Sep 12 18:34:50 EDT 2004@
#
#
#        Paij-plo leans over my shoulder, "And then it's (re-eep) eaten."
#
#
#        When he says this, my spine leaks out of my back.  It's a whole (frightening)
#        religion and it comes out in these kooky colloquialisms.  When Paij-plo
#        starts his solemn _eating time_ or _he's right behind us_ talk.
#
#
#      I guess there was a time on Endertromb when everyone lived without death.  Paij-plo
#      says a "panther-like man" fell into a huge chasm, a deep tunnel that wound around the
#      planet.  His body was found on the other side of the planet.  But he had no bruises, his
#      body was still warm.  He was only dead by one second.
#
#
#      His body stayed dead for one second.  It continued to be warm and it never rotted.
#      
#      
#      Eb-F-F-A.  Then, Bb-D-D-F.


#        Dr. Cham turned to the goat. "You know how to work these controls, don't you?  I need to
#        file a program."
#
#
#        "
#        The goat tossed his legs up on the panel and eased a few plush handles into an array of positions
#        until a slot opened at the base, from which a long silver chain spilled.  At the end of the chain
#        dangled a thick retainer the size of a fish filet.

