    - >
        "So what?  You don't think animals with tentacles can drive?"


        "Well, not only is he going to flub up the steering wheel but he has all these
        legs all over the foot pedals.  This is not smart.  Let's get another bus.  Come on."
        
        
        "You know, he's probably been driving like that all day.  Is he really going to
        start crashing at this point in his career?"
        

        "Buses do crash," said Fox Small.  "Some do.  This smells crashworthy."


        "Sheer doo-doo!"  And Fox Tall yelled to the driver, "Hey, cabby, how long
        have you been driving this bus for?"


        The bus driver peered over darkly under his cap and started to turn toward them, but his
        tentacles were stuck to the wheel.  He jerked swiftly at his forelegs and, failing their
        release, he turned to the wheel and focused his energies on milking his glands for some
        slicker secretions.  Bubbles of mucus oozed.


        "Let's get outta here," said Fox Tall and the two ran off into the street, slamming right
        into the cat Blix.


        "Alright, well, the bus is full," said Blix.  "I don't know why the driver stopped if he knew the
        bus was crammed with hoppers."


        "We're thinking he was about to crash into us," said Fox Tall, "and he opened the
        door to make it look like a planned route stop."


        "Keep in mind, Blix, we hadn't really discussed that possibility out loud, so I haven't had a chance
        to formally agree," said Fox Small.  "Nevertheless, it sounds rational to me."


        "I'm thinking all the buses are going to be full like this."  Blix bit his lip,
        thinking and flicking his eyes about.  "Let's just--"  He pointed down the circuitry
        of apartment buildings that wound to the south.  "But maybe--"  He looked up and surveyed the stars,
        scratching his head and counting the constellations with very small poking motions
        from the tip of his finger.


        "Are you getting our bearings from the stars and planets?" asked Fox Small.


        Blix didn't speak, he ducked off to the north through a poorly laid avenue
        back behind the paint store.
        But before we follow them down that service road, Smotchkkiss, I have one more
        frog for you, perched on a long lilypad that stretches out to hold anything at all.


        <pre>
         irb> cat = "Blix"
         irb> puts "Does #{ cat } see what's up?  Is #{ cat } aware??"
           => "Does Blix see what's up?  Is Blix aware??"
        </pre>


        The little frogs from earlier (@%s@ or @%d@) were only placeholders for
        single strings.  Saving places in the string.


        The lilypads above start with a flower bud, the *octothorpe*.  You've also
        seen it as a pound sign on telephones.  After the flower bud, two leaves
        form the edges of the lilypad.  The leaves are *curly braces*, also seen many
        times before as the _crab pincers_ for a code block.


        bq. An empty lilypad @"#{}"@ becomes an empty string @""@.


        When the lilypad is found in a *double-quoted* string, Ruby runs any code found in between
        the two leaves of the lilypad.  The lilypad is lifted out and the result of the code is placed there in
        the string.  This lilypad swap is called _string interpolation_.


        <pre>
         irb> fellows = ['Blix', 'Fox Tall', 'Fox Small']
         irb> puts "Let us follow #{ fellows.join ' and ' } on their journey."
           => "Let us follow Blix and Fox Tall and Fox Small on their journey."
        </pre>


        The lilypad is very durable and can hold any kind of code inside.  Above
        we are using @Array#join@, but you can do anything you like inside.  Call
        object methods, conditional @if@ or @case@ statements, even define classes.


        <pre>
         irb> blix_went = :north
         irb> puts "Blix didn't speak, he ducked off to the #{ blix_went } through #{
                     if blix_went == :north
                       'a poorly laid avenue behind the paint store'
                     elsif blix_went == :south
                       'the circuitry of apartment buildings'
                     else
                       '... well, who knows where he went.'
                     end }.  But before we follow them..."
         => "Blix didn't speak, he ducked off to the north through a poorly laid avenue
             behind the paint store.  But before we follow them..."
        </pre>


        The foxes followed Blixy off behind the paint store and down the cracked, uneven asphalt.
        All of the stores on the dilapidated lane leaned at angles to each other.  In some places,
        slabs of sidewalk jutted up from the ground, forming a perilous walkway, a disorderly
        stack of ledges.  Almost as if the city planners had hoped to pay tribute to the techtonic
        plates.  One small drug store had slid below the surface, nearly out of eyesight.


        Truly, it was colorful, though.  The paint store had been tossing out old paints
        directly onto its neighbors.  The shops nearest the paint store were clogged with hundreds
        of colors, along the windowsills and in the rain gutters.  Yes, on the walls and pavement.


        Basically, beginning with the back porch of the paint store, the avenue erupted into a giant incongruous
        and poorly-dyed market.


        Further down, a dentist's office was primed with red paint and, over that, a fledgling artist
        had depicted a large baby who had fallen through a chimney and arrived in a fireplace full of soot.
        Crude black strokes marked the cloud of ashes raised during impact, easily mistaken for thick
        hair on the child's arms and back.  The child looked far too young to have much hair, but
        there they were: rich, blonde curls which toppled liberally from the child's head.  Under the child's
        legs was painted the word _BREWSTER_.


        The same artist had hit the library next store and had hastily slapped together a mural of
        a green sports car being pulled from the mud by a team of legless babies tugging with shiny chains.
        Again, the drastically blonde curls!


        "I need answers," said the Fox Tall, who had ground to a halt in front of the scenery.


        "I'm starting to believe there's no such thing," said Fox Small.  "Maybe these are the
        answers."


        "Brewster?" said Fox Tall.  He walked nearer to the library and touched the cheek of one
        of the legless children who was closer in perspective.  The child's cheek appeared to
        contain a myriad of jawbones.


        Blix was another two houses down, navigating through the askew brickwork, the paved gully that
        led to _R.K.'s Gorilla Mint_, as the metallic sticker on the door read.  The building was plastered
        with miniature logos for the variety of payment options and identification acceptable at
        _R.K.'s Gorilla Mint_.  Even the bars over the window were lined with insurance disclosures and
        security warnings and seals of government authorization, as well as addendums to all of these,
        carbon paper covering stickers covering torn posters and advertising.  And all mingled with
        paint splashes that intruded wherever they pleased.


        !i/wixl-9.gif(R.K.'s Gorilla Mint.)!


        "I like the way the fresh paper feels against my tongue," said the gorilla at the counter.
        His fingers rubbed quietly against the bills.  He drew his face near to the fanned currency
        and whisked his nose along the pulpy cash.


        "Is R.K. in this evening?" asked Blix.


        "R.K. is not," said the gorilla cashier.  He turned to the three travellers and spread
        his money out on the counter's surface, evenly spacing them apart and lining up all the
        edges neatly.  "Now, which one of these do you think is worth the most?"


        The foxes looked over the different bills and Fox Small muttered to himself, "Well,
        maybe-- no, but I'll bet-- Wait, does one of these have bananas on it?  'Cause that
        one-- nope, no fruit or rope swings or-- Terrible, this is difficult!"  And in a
        lower voice, "So difficult to read.  What does this one say?  Symbols or something?
        If all these bills have are symbols, it's going to be impossible for us to figure out
        which one is of the greatest value."


        "That's why I said, '_Guess_.'"  The gorilla tapped each bill in order.  "See, you've
        got a 1 in 5 chance."


        "Unless the symbols mean something," said Fox Tall.  "Unless we can figure it out."


        "We can figure it out," said Fox Small.


        "No," said the gorilla.  "The symbols are meaningless."


        "Whoever created the money intended some meaning for them," said Fox Small.  "Why
        use _this_ symbol?"  He pointed to an ampersand printed in dark ink.


        "Yeah, we saw you sniffing the money and fantasizing about it back there," said
        Fox Tall.  "I'll bet these symbols mean all kinds of things to you!"


        "No, I don't think so," said the gorilla.


        If I can weigh in at this point, I think the symbols do have meaning.  They may not
        be _loaded_ with meaning, it may not be oozing out through the cracks, but I'm sure
        there's a sliver of meaning.


        <pre>
         irb> $:
           => ["/usr/lib/ruby/site_ruby/1.8", "/usr/lib/ruby/site_ruby/1.8/i686-linux", "/usr/lib/ruby/site_ruby", 
               "/usr/lib/ruby/1.8", "/usr/lib/ruby/1.8/i686-linux", "."]
        </pre> 


        Variables which start with the American cash sign are global variables.  They can
        be seen from anywhere in the program, *from inside any scope*.  (Dr. Cham used this
        variable while snooping around The Originals' computer bay.)


        So why does the *cash sign followed by a colon* represent an array of *all directories
        where Ruby will search when you try to load a file with @require@*?  The cash sign
        means "global."  But why the colon?


        Historically, on many operating systems, a list of directories contains colons which
        separated each entry.  I like to see the colon as a pair of eyes, scanning the directories
        for files.  We store our lookout list behind the eyes.


        Here's a few more special global variables:


        <pre>
         irb> $"      # The $" variable contains all files which have been loaded with `require'
           => ["irb.rb", "e2mmap.rb", "irb/init.rb", ... "rbconfig.rb"]
                      # These files are stored somewhere else, but their code is being used
                      # in this program.  Much like quoting someone else's work -- these are the
                      # footnotes -- hence the double-quote.

         irb> $0      # The $0 variable contains the running program's filename.
           => "irb"   # A zero can be considered the beginning of a number count.
                      # This variable answers the question, "Where did this program begin?"

         irb> $*      # The $* variable contains all the arguments passed into a program.
           => ['--prompt', 'simple']
                      # This one is easy to remember, if you remember that Ruby methods
                      # also use the asterisk to capture arguments into an array.

         # The $! contains the current exception raised.
         # The exclamation indicates a state of alarm.  An exception!
         irb> begin
         irb>   raise TypeError, "I don't believe this information."
         irb> rescue
         irb>   p $!
         irb> end
           => #<TypeError: I don't believe this information.>

         # The $@ contains the current backtrace, if an exception was raised.
         # The backtrace shows were Ruby was _at_ when the exception fired.
         irb> begin
         irb>   raise TypeError, "I don't believe this information."
         irb> rescue
         irb>   p $@
         irb> end
           => ["(irb):25:in `irb_binding'", "/usr/lib/ruby/1.8/irb/workspace.rb:52:in `irb_binding'", 
               "/usr/lib/ruby/1.8/irb/workspace.rb:52"]
        </pre>


        "I don't remember you."  Blix looked at the gorilla with great interest.
        "Are you one of R.K.'s kids or something?"


        "Oh, come on!" said Fox Small, holding up a bill with an exclamation mark on it up to the gorilla's nose.
        "Don't tell me this means _nothing_ to you!  This one is probably _really important_
        since it has an exclamation on it.  Maybe it pays for emergency stuff!  Hospital
        bills or something!"


        *"Yeah, surgery!"* said Fox Tall.


        The gorilla looked at the foxes with disgust from under the brim of his cap.  "No,
        you're wrong.  You can't pay for surgeries with that."


        "But you see our point," said the small fox.  He grabbed some of the other bills.
        "And you say this bill _cannot_ pay for surgeries?  Well that sounds like it has
        a specific _non-surgery-related_ purpose.  Now, the question mark one.  Oh, what would that one be for?"

        
        "Hey, give me those," the gorilla snatched at the bills over the counter, but 
        his long thumb kept getting in the way and every time he thought he had grabbed bills, 
        it turned out he had only grabbed his long thumb.


        "Hey, hey, look, he's mad," said Fox Tall, happily clapping.  "I wonder why.  Did you notice
        how mad he started getting once we mentioned all these interesting meanings?  *We're on to
        you!  We figured out your game so fast!"*


        "We totally did!" said Fox Small, one of his elbows caught in the grip of the gorilla,
        the other arm waving a bill that featured an underscore.
        "This one's for buying floor supplies, maybe even big rolls of tile and linoleum."


        "See," said Fox Tall, working to pry the gorilla's fingers free, "we just have to figure out which is more expensive:
        surgery or linoleum!  This is _so easy!"_


        *"NO IT'S NOT!"* yelled the gorilla, yanking at the smaller fox and battering the
        fox with his palms.  *"YOU DON'T KNOW ANYTHING ABOUT MONKEY MONEY!!  YOU DON'T EVEN _HAVE_
        YOUR OWN KINDS OF MONEY!!"*


        "We could _easily_ have our own kinds of money!" said Fox Tall, taking the chimp's
        hat and tossing it to the back of the room, where it sailed behind a wall of safety
        deposit boxes.  "And -- _your hat is outta here!_"


        "Come on, give him back his bills," said Blix, waving his arms helplessly from the
        sidelines.  "We could really use this guy's help."


        "Stop hitting me!" screamed the littlest fox.  "I've almost figured out this one
        with the dots on it!!"


        Suddenly, with great precision and without warning, Fox Tall grabbed the monkey's nose
        and slammed his face down against the counter.  The pens and inkpads on its surface
        rattled and "Bam!" said the fox.  The gorilla's eyes spun sleepily
        as his arms... then his neck... then his head slithered to the floor behind the counter.


        Here are a few more global variables you might care to use:


        <pre>
         irb> $/      # The $/ is the line separator, it is normally set to \n, which represents _Enter_
           => "\n"    # or "end of line".  The slash represents a sword slashing lines in a file.

         # The line separator controls how methods like each_line or readlines breaks up strings.
         irb> "Jeff,Jerry,Jill\nMichael,Mary,Myrtle".each_line { |names| p names }
           => "Jeff,Jerry,Jill\n"
           => "Michael,Mary,Myrtle"

         # If you change the line separator, you change how many methods work, such as each_line.
         # See what happens when I change the line separator to a comma.
         irb> $/ = ','
         irb> "Jeff,Jerry,Jill\nMichael,Mary,Myrtle".each_line { |names| p names }
           => "Jeff,"
           => "Jerry,"
           => "Jill\nMichael,"
           => "Mary,"
           => "Myrtle"

         irb> $,     # The $, variable is the join separator, used when joining strings with
           => nil    # Array#join or Kernel::print.  The comma is a common join character.

         # The join separator is normally empty.
         irb> ['candle', 'soup', 'mackarel'].join
           => "candlesoupmackarel"
         irb> $, = ' * '; ['candle', 'soup', 'mackarel'].join
           => "candle * soup * mackarel"
         
         # But, usually, you won't need the global variable.
         irb> ['candle', 'soup', 'mackarel'].join ' # '
           => "candle # soup # mackarel"

         irb> $;     # The $; variable is the split separator, used when splitting strings
           => nil    # with String#split.

         # The split separator is normally empty, which means String#split will separate
         # the string where there is whitespace.
         irb> "candle  soup\nmackarel".split
           => ["candle", "soup", "mackarel"]
         irb> $; = 'a'; "candle  soup\nmackarel".split
           => ["c", "ndle  soup\nm", "ck", "rel"]

         # But, usually, you won't need the global variable.
         irb> "candle # soup # mackarel".split ' # '
           => ['candle', 'soup', 'mackarel']
        </pre>


        Outside the _Gorilla Mint_, Blix scolded the foxes.  "We could have used that guy's help!  If he knows
        where R.K. is, we could use his cunning!"


        "*We don't need that ape's money!*" said Fox Small.  "*We can make our _own_ money!*"


        "*We could support electronic wristbands!*" said Fox Tall.


        "His money is worthless," said Blix.  "It's gorilla money.  It has no value.  It's worse than
        blue crystals."


        "But it serves a purpose," said Fox Tall.


        "No it doesn't," said Fox Small.  "He just said it's worthless."


        "But what about linoleum and surgeries?" said Fox Tall.


        "Yeah," said Fox Small, up at Blix.  "What about linoleum and surgeries?"


        "If all the hospitals were staffed by gorillas and all the home improvement chains were strictly operated
        by gorillas, then -- YES -- you could buy linoleum and surgeries.  But I _guarantee_ that you would have
        very sloppy linoleum and very hideous surgeries.  I don't think you'd make it out of that economy alive."


        "So, if R.K. is so cunning," said Fox Tall, grinning slyly, "why does he print such worthless currency?"


        "It's a cover for other activities," said Blix.  "Besides, if you're so smart, why did you resort to
        violently pounding that poor gorilla?"


        "I guess that was a bad play," said Fox Tall, hanging his head.  "My friend here will tell you that I've
        been on edge all day."


        "And your rage finally reared its fuming snout!" said Fox Small.  "You're finally living up to your
        goatee."


        !i/wixl-10.gif!


        Down the lanes they travelled, the two foxes oblivious to their direction, but having a good time
        now that they had Blix leading the way with such urgency.  They lapsed into a careless wandering right behind Blix
        and spent their afternoon heckling most of the passersby.


        One such target of their ongoing commentary was The Winged Scroll Carriers, pairs of bats that carry
        documents which need to be immediately sworn and notarized.  There can be no delay, they must go swift,
        there is not even time to roll up the scroll, no, they must drop their swiss cheese and be out the door.


        These couriers resemble a kind of Ruby construct called *delimited types*.  A long series of characters
        comprises the scroll, flanked on each side by a bat bracing its curly wings to hold the scroll together.
        The opening bat wears a hat on which is written @%w@, which identifies the scroll as a set of words.


        <pre>
         irb> bats = %w{The Winged Scroll Carriers}
           => ['The', 'Winged', 'Scroll', 'Carriers']
        </pre>


        The @%w@ bats and their scroll, when fed into Ruby, emerge as an array of words.  This syntax is a shortcut
        in case you don't want to go through the trouble of decorating each word with commas and quotes.  You are
        in a hurry, too, there can be no delay.  You jot out the words between the bats and let Ruby figure out where
        to cut.


        Other bats, other hats.  For instance, the @%x@ hat runs an external program.


        <pre>
         irb> %w{ruby --help}
           => ["ruby", "--help"]
         irb> %x{ruby --help}
           => "Usage: ruby [switches] [--] [programfile] [arguments] ..."
        </pre>


        My favorite is the @%Q@ hat, which can also be written as just @%@.  This acts just like a double-quoted string,
        but looks nice when used with strings that run-on for many lines.  Like, say you're adding a new method with @eval@.


        <pre>
         m = "bats!"
         eval %{
           def #{ m }
             puts "{" * 100
           end
         }
        </pre>


        Just like a double-quoted string, you can use the string interpolation lilypads inside.


        !i/wixl-15.png(Cloneberries: The More You Eat, The More *You*.)!


        Blixy wagged his head.  "Oh, dear me."


        "Egads! My hand is pregnant," said Fox Tall, watching the little fox embryo slide about in his palm.


        "They are good berries, though," said Blix.  "The wine they make from these berries
        will make ya grow a few eyeballs in your teeth.  But no more than that."


        "Ah, pain!" yelled Fox Small, as his miniature squeezed out through the pores in his scalp.  But soon he
        was cradling his little self and murmuring lullablies.  _Nevermore, nevermore, sweetly sang the
        nightingale.  Winking starlight, sleeping still, whilst perched on a Sycamore stump._


        Making duplicates of Ruby objects is no more than a berry's worth of code.


        <pre>
         irb> tree = [:berry, :berry, :berry]
           => [:berry, :berry, :berry]
         irb> treechild = tree.clone
           => [:berry, :berry, :berry]
        </pre>


        The @clone@ method makes an exact copy of a Ruby object.  How does this differ from regular
        assignment?


        <pre>
         irb> tree_charles_william_iii = tree
           => [:berry, :berry, :berry]
        </pre>


        Assigning object to variables only creates more nicknames.  The above Array can be called @tree_charles_william_iii@
        now.  Or the shorter @tree@.  The same object, but different names.


        However, a clone is a copy of an object.  You can modify it without affecting the original.


        <pre>
         irb> treechild << 'flower'
           => [:berry, :berry, :berry, 'flower']
         irb> tree
           => [:berry, :berry, :berry]
        </pre>


        The @clone@ method doesn't make copies of everything attached to the object, though.  In the array above, only the
        array is copied, not all the symbols and strings inside.


        You may also see the @dup@ method used to copy objects.  The @dup@ method makes copies which aren't as exact.  For example,
        there are objects in Ruby which are "frozen" and can't be altered.  If you @clone@ the object, you get an exact copy which
        is also frozen.  If you use @dup@, you get an unfrozen copy that you can change if you like.


        The @clone@ method also copies the metaclass of an object, whereas @dup@ does not.


        <pre>
         irb> o = Object.new
         irb> class << o
         irb>   def nevermore; :nevermore; end
         irb> end

         irb> o.clone.nevermore
           => :nevermore
         irb> o.dup.nevermore
         # NoMethodError: undefined method `nevermore' for #<Object:0xb7d4a484>
         #         from (irb):7
         </pre>


        You don't always need to make copies of objects, though, since many methods like @collect@ and @gsub@
        and @format@ make copies for you as part of their work.


        !i/wixl-4.gif(Deer of the Smoky Pink Puffing.)!


        Over the hills and down the valleys, they ran through the grass where the Deer of the Smoky Pink
        Puffing roam.  The sun was obscured by the lumbering pink clouds, emblazened with deer language,
        tinting the horizon a gradient of grapefruit and secreting a glow over the meadow.  The clouds
        slid past each other, some bobbing upwards, destined for Canadian relatives.  Others landing a
        readable distance from a recipient's hooves.


        "Let's stop!  _Please!_" yelled Fox Tall.  "You can't expect us to run in this *unbreathable fluff!*"


        "Why are you yelling?" said Blix, as a thin stratus telegram wafted behind his legs.  "You don't
        need to raise your voice above a whisper.  These long skinny clouds are usually just a mumble or
        a sigh.  They may not even make it all the way."


