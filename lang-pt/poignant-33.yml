    - >
        O método @reverse@ é então usado na String que o @gets@ está devolvendo.  O método @reverse@ 
        é parte da classe @String@.  O que significa que *tudo que for uma string tem o método @reverse@
        disponível*.  Mais sobre classes no próximo capítulo, por enquanto só saiba que *alguns métodos
        só estão disponíveis para certos tipos de valores*.


        Eu não acho que o @reverse@ vai dar muito certo.  As autoridades só precisam por um espelho da frente
        "airégiN ad elortnoc o emoT."  Prenderão a gente quando as starmonkeys começarem a pousar em Lagos.


        As letras maiúsculas estão entregando o ouro.  Talvez se nós passarmos todas as letras na string
        pra maiúsculas antes de inverter.

    
        <pre>
         ideia_ao_contrario = gets.upcase.reverse
        </pre>


        h3. Your Repetitiveness Pays Off


        You hand me a legal pad, doused in illegible shorthand.  Scanning over it, I start to
        notice patterns.  That you seem to use the same set of words repeatedly in your musings.  
        Palavras como _starmonkey_, _Nigéria_, _bomba_.  Algumas frases até.  _Put the kabosh on._
        Que são ditas toda hora.


        Vamos disfarçar estes termos bobos, meu irmãor.  Let us obscure them from itching eyes that
        cry to know our delicate schemes and to thwart us from having great pleasure and many go-carts.
        Vamos trocá-los por linguagem inocente.  Novas palavras com significado secreto.


        Eu comecei uma lista de palavras, uma @Hash@ do Ruby, que contém these oft seen and dangerous words of yours.
        Na Hash, cada palavra perigosa eh comparada contra uma palavra código (ou frase).  A palavra código então
        será trocada pela palavra real.


        <pre>
         palavras_codigo = {
           'starmonkeys' => 'Phil e Pete, those prickly chancellors of the New Reich', 
           'catapulta' => 'chucky go-go', 'firebomb' => 'Heat-Assisted Living', 
           'Nigeria' => "Ny e Jerry's Lavagem à Seco (com Donuts)",
           'Put the kabosh on' => 'LiPut the cable box on'
         }
        </pre>


        As palavras que são colocadas antes da seta são chamadas *chaves*.  As palavras depois
        das setas, as definições, geralmente são chamadas de *valores* simplesmente.


        Notou as aspas duplas em volta de @Ny e Jerry Lavagem à Seco (com Donuts)@.  Já quen numa
        aspa simples está sendo usando um apóstrofo, nós não podemos usar aspas simples em torno
        da string.  (De qualquAlthough, you can use single quotes if you put a backslash before the apostrophe
        such as: @'Ny e Jerry Lavagem à Seco (com Donuts)'@.)


        Se você precisar procurar por uma palavra em específico, você pode usar o método das *chaves*.


        bq. @palavras_codigo['catapulta']@ irá responder com a string @'chucky go-go'@.
        

        Olhe as chaves como se elas fossem paletes de madeira nas quais as palavras estão em cima.
        Uma empilhadeira poderia usar suas pás em cada lado da palete e a trazer da prateleira
        de volta ao depósito.  A palavra na palete é chamada de _indexador_.
        Estamos pedido para a empilhadeira achar o indexador pra gente e nos trazer de volta
        o valor correspondente.


        Se você nunca esteve num depósito, você pode ver as chaves como  handles.
        Imagine an industrious worker putting on his work gloves and hefting the index back to
        your custody.  If you've never used handles before, then I'm giving you about
        thirty seconds to find a handle and use it before I blow my lid.


        Assim como vários operadores que você viu recentemente, as chaves indexadoras são
        simplesmente um atalho para um método.


        bq. @palavras_codigo.[]( 'catapulta' )@ irá responder com a string @'chucky go-go'@.


        h3. Fazendo a Troca

        
        Eu me adiantei e salvei a Hash de código em um arquivo chamado *listadepalavras.rb*.


        <pre>
         require 'listadepalavras'

         # Pegar a idéia do mal e converter em palavra código
         print "Entre com sua nova idéia: " 
         ideia = gets
         palavras_codigo.each do |real, codigo| 
           ideia.gsub!( real, codigo )
         end

         # Save the jibberish to a new file
         print "Arquivo codificado.  Favor entrar com um nome para esta idéia: "
         nome_ideia = gets.strip
         File::open( "ideia-" + nome_ideia + ".txt", "w" ) do |f|
           f << ideia
         end
        </pre>


        O Script começa puxando nossa lista de palavras.  Assim como @gets@ e @print@, o método @require@
        é um método do kernel, você pode usá-lo em qualquer lugar.  Eu dei a ele a string @'listadepalavras'@
        e ele vai procurar um arquivo chamado *listadepalavras.rb*.


        Depois disso, há duas seções.  Estou marcando estas seções com comentários, as linhas que começam
        com o símbolo *cerquilha #*.  Comentários são  *notas úteis* que acompanham seu código.  Colegas que
        come wandering through your code will appreciate the help.  When going through your own code
        after some time has passed, comments will help you get back into your mindset.  And there's
        software out there that can take your comments and build documents from them.  (RDoc and Ri --
        see Expansion Pak #1!)


        Eu gosto de comentários porque posso deixar de lado pilhas de código e marcar pontos importantes.


        Como os comentários nos dizem, a primeira seção de pergunta uma idéia maléfica e a troca por uma
        palavra código.  A segunda seção salva a idéia codificada num novo arquivo de texto.


        <pre>
         palavras_codigo.each do |real, codigo| 
           idea.gsub!( real, codigo )
         end
        </pre>


        Você viu o método @each@?  O método @each@ está em todo lugar no Ruby.  
        Está disponível para Arrays, Hashes, até Strings.  
        Aqui, nosso dicionário @palavras_chave@ é mantido numa Hash.  Este método @each@ corre entre
        *todos os pares da Hash*, cada palavra perigosa é comparada com sua palavra código, mandando cada par para 
        o méotodo @gsub!@ para a troca atual.


        No Ruby, @gsub@ é abreviação de _global substitution_ (substituição global).  O método é usadoed to search and replace.
        Here, we want to find all the occurences of a dangerous word and replace with its safe
        code word.  With @gsub@, you provide the *word to find as the first argument*, then the *word
        to put in its place as the second argument*.


        Why aren't we hanging on to the answer from @gsub@?  Doesn't @gsub@ give us an answer back that
        we should keep?  You'd think the line would read:


        <pre>
         ideia_segura = idea.gsub( real, codigo )
        </pre>


        Sim, com @gsub@ nós temos que ficar com a resposta.  Estamos usando uma variação do @gsub@ que é
        totalmente animal.  Notou a *exclamação* no @gsub!@ usada dentro de cada bloco @each@?  A
        exclamação é um sinal que @gsub!@ is a bit of a zealot.  See, @gsub!@ will go ahead and
        *replace the words in @idea@ directly*.  When it's done @idea@ will contain the newly altered string
        and you won't be able to find the old string.


        Pode chamar @gsub!@ de *método destrutivo*.  Ele faz susas modificações no valor diretamente. Enquanto @gsub@
        deixará o valor intacto, apenas respondendo com uma nova string que contém as alterações.
        (Why must @gsub!@ scream when he descends upon his prey?  Merciless assailant!)


        h3.  Arquivo de Texto de um Homem Louco


        Vamos salvar a idéia codifica em um arquivo.


        <pre>
         # Save the jibberish to a new file
         print "Arquivo codificado.  Favor entrar com um nome para esta idéia: "
         nome_ideia = gets.strip
         File::open( 'ideia-' + nome_ideia + '.txt', 'w' ) do |f|
           f << ideia
         end
        </pre>


        Esta seção começa perguntando por um nome pelo qual a idéia possa ser chamada.  Este nome será usado
        para se fazer o nome do arquivo quando salvarmos a idéia.


        O método @strip@ serve pra todas strings.  Este método *corta espaços e linhas vazias* do *começo
        e fim* de uma string.  Isto irá remover o _Enter_ no fim da string que você digitou.
        E também irá remover espaços caso você tenha acidentalmente deixado algum.


        Depois que temos o nome da idéia, vamos abrir um novo arquivo de texto em branco.  O nome do arquivo é
        contruído adicionando-se strings.  Se você digitou @'mustard-plus-codeine'@, nossa matemática será: @'ideia-' +
        'mustard-plus-codeine' + '.txt'@.  O Ruby pressiona isso em uma única string.
        @'idea-mustard-plus-codeine.txt'@ é o arquivo.


        Estamos usando o método de classe @File::open@ para criar um novo arquivo.  Até agora, nós usamos
        vários métodos do kernel para fazer nosso serviço.  Nós damos uma string pro método @print@ e ele a
        imprime na nossa tela.  Um segredo sobre método do kernel como @print@: eles são na verdade 
        *métodos de classe*.


        bq. @Kernel::print( "55,000 Starmonkey o Saúdam!" )@


        O que isto significa?  Por que isto importa?  Isto significa que o @Kernel@ é o centro do universo Ruby.
        Sempre que você está no seu código, o @Kernel@ estará do seu lado.  Você nem precisa dizer
        @Kernel@ pro Ruby.  O Ruby sabe checar o @Kernel@.


        A maioria dos métodos são mais especializados que @print@ ou @gets@.  Pegue @File::open@ por
        exemplo.  O criador do Ruby, Matz, nos deu vários métodos diferentes que lêem,
        renomeiam, ou deletam arquivos.  Eles estão todos organizados dentro da classe @File@.


        bq. @File::read( "idea-mustard-plus-codeine.txt" )@ vai responder uma com uma string
        contendo todo o texto do seu arquivo idéia. (Read significa ler).


        bq. @File::rename( "aquivd_antigo.txt", "aquivo_novo.txt" )@ irá renomear o @aquivo_antigo.txt@.


        bq. @File::delete( "aquivo_novo.txt" )@ irá explodir o novo arquivo.


        Estes métodos File estão todos *dentro do Ruby*.  Estão apenas armazenados num
        contêiner chamado Classe @File@.  Então, enquanto você pode seguramente chamar os métodos do kernel
        sem precisar digitar @Kernel@, o Ruby não checa automaticamente a classe @File@.
        Você precisa dizer o nome do método completo.
    

        <pre>
         File::open( 'ideia-' + nome_ideia + '.txt', 'w' ) do |f|
           f << ideia
         end
        </pre>


        Nós passamos dois argumentos dentro de @File::open@.  O primeiro é o *nome do arquivo para abrir*.
        O segundo é uma string contendo o *modo do arquivo*.  Usamos @'w'@, que significa escrever em um novo
        arquivo.  (Outras opções são: @'r'@ para ler o arquivo ou @'a'@ para adicionar no fim do arquivo.)


        O arquivo está aberto para escrita e nos é dado na forma de variável @f@, que pode ser vista
        *descendo o escorrega dentro do nosso block*.  Dentro do bloco, nós escrevemos no arquivo.  Quando
        o bloco se fecha com @end@, nosso arquivo é fechado também.


        Note que nós usamos o *concatenador* @<<@ para escrever no arquivo.  Podemos fazer isto porque arquivos
        têm um método chamado @<<@, assim como as Strings.


        h3. Acalme-se, Suas Idéias Não Estão Presas


        Aqui, vamos pegar nossas idéia de volta em seus verbos originiais,
        so you can rumminate over their brilliance.


        <pre>
         require 'wordlist'

         # Imprima cada idéia com as palavras corretas
         Dir['ideia-*.txt'].each do |nome_arquivo|
           ideia = File.read( nome_arquivo )
           palavras_codigo.each do |real, codigo| 
             ideia.gsub!( codigo, real )
           end
           puts ideia
         end
        </pre>


        Nessa altura, you should be up to snuff with most of this example.  Não vou te incomodar com
        detalhes mundanos.  Veja se você consegue entender sozinho como isso funciona.


        Contudo, temos um método de classe interessante aqui.  O método @Dir::[]@ procura num diretório (alguns
        de vocês podem chamá-los de "pastas").  Assim como você viu com as Hashes, os colchetes indexadores
        pode ser métodos de Classe.  (Começando a ver a brilhante, glinting gorgeousness of Ruby?)


        Então nós estamos usando a empilhadeira para pegar os arquivos no diretório que coincidem @'idea-*.txt'@.  The
        @Dir::[]@ irá usar o asterisco como um coringa.  Estamos basicamente dizendo, "Encontre tudo que
        comece com _ideia-_ e termine com _.txt_."  A empilhadeira vai para o diretório e volta
        com uma lista de arquivos encontrados.


        Esta *lista de arquivos* vem na forma de @Array@ a Centopéia, com uma @String@ para cada 
        arquivo.  Se você está curioso e que brincar com @Dir::[]@, tente isso:


        bq. @p Dir['idea-*.txt']@ irá imprimir:


        bq. @['idea-mustard-plus-codeine.txt']@ (_um Array de nomes de arquivos!_)


        Sim, o método @p@ funciona igual @print@.  Mas @print@ é para se imprimir strings,
        enquanto @p@ irá imprimir _qualquer coisa_.  Veja isso. 
        

        bq. @p File::methods@ irá imprimir:


        bq. @["send", "display", "name", "exist?", "split",@ ... _a lista completa dos nomes dos métodos!_ @]@ 


#        h3. Extra Credit: PStore
#
#        
#        <pre>
#         require 'pstore'
#         journal = PStore.new( 'journal.p' )
#         journal.transaction do
#           journal.
#         end
#        </pre>


