    - Esta é para os desprivilegiados: >

        !i/elderly-1.gif(Some people still can't get past what he did.)!


        Se você me der um número, seja ele um período da vida do Dr. Cham, lhe darei uma sinopse daquele
        período.  E eu falei isso com um método Ruby, isso será uma peça independente, um pedaço de código
        isolado que pode ser ligado à voz de um vulcão robótico, quando essas coisas forem o ápice
        das vozes talentosas não autoritárias.


        Okay, eu preciso que você preste atenção nas palavras @def@ , @case@ e @when@.  Você já viu períodos (Ranges), os
        acordiões fechados @1895..1913@, no capítulo 3.  Eles contém as pontas e todos os números entre.  E as barras
        no fim de cada linha simplesmente ignoram o _Enter_, assegurando ao Ruby que _há mais linhas por vir_.
        


        Então, por favor: @def@, @case@ e @when@.


        <pre>
         def biografia_do_dr_cham( ano )
           case ano
           when 1894
             "Nasceu."
           when 1895..1913
             "Infância em Lousville, Winston Co., Mississippi."
           when 1914..1919
             "Trabalhou numa enfermaria de Pecãs; socou um protestante."
           when 1920..1928
             "Navegou na companhia do Rio Wisdomming, which journeyed \
              the Mississippi River and engaged in thoughtful self-improvement, \
              where he finished 140 credit hours from their Oarniversity."
           when 1929
             "Voltou à Louisville para escrever um romance sobre camponeses caçadores que viajam no tempo."
           when 1930..1933
             "Took up a respectable career insuring pecan nurseries.  Financeiramente estável, ele \
              passou algum tempo no Brasil e Novo México, buying up rare paper-shell pecan trees.  Just \
              as his notariety came to a crescendo: gosh, he tried to buried himself alive."
           when 1934
             "Voltou a escrever seu romance.  Mudou de caçadores para funcionários de seguradora e \
              de camponeses para protestantes."
           when 1935..1940
             "Took Arthur Cone, the Headmaster of the Brotherhood of River Wisdomming, as a \
              houseguest.  Together for five years, engineering and inventing."
           when 1941
             "Aqui as coisas começam a ficar interessantes."
           end
         end
        </pre>


        The @def@ keyword.  Here is our first *method definition*.  A plain kernel method, which can
        be used anywhere in Ruby.  And how do we run it?


        <pre>
         puts biografia_do_dr_cham( 1941 )
        </pre>


        Which answers with "And this is where things got interesting."  It's the same story again and again:
        _use your answers._  I've set things up above so that the @case@ statement always answers with a string.
        And since the case statement is the final (and only) statement in the method, then the method
        answers with that string.  Trickling water spilling down from ledge to ledge.


        Deixe me ser mais claro sobre a condição @case@.  Na verdade, eu deveria chamá-la de @case..when@,
        já que elas não pode ser usadas separadamente.  A palavra-chave @case@ é serguida de um valor, que é comparado contra
        cada valor que segue a palavra-chave @when@.  O primeiro valor a coincidir é usado pelo @case@,
        o resto é ignorado.  Você pode fazer a mesma coisa com um monte de @if..elsif@,
        mas isso é mto palavreado.
       

        <pre>
         case year
         when 1894
           "Nasceu."
         when 1895..1913
           "Infância em Lousville, Winston Co., Mississippi."
         else
           "Sem informações sobre este ano."
         end
        </pre>


        É a mesma coisa que:


        <pre>
         if 1894 === year
           "Nasceu."
         elsif 1895..1913 === year
           "Infância em Lousville, Winston Co., Mississippi."
         else
           "Sem informações para este ano."
         end
        </pre>


        Os *três iguais (===)* is a length of velvet rope, checking values much like the double equals.  It's just:
        the triple equals is a longer rope and it sags a bit in the middle.  It's not as strict, it's a bit
        more flexible.


        Take the Ranges above.  @(1895..1913)@ isn't at all *equal* to @1905@.  No, the Range @(1895..1913)@ is only
        truly *equal* to any other Range @(1895..1913)@.  In the case of a Range, the triple equals cuts you a break
        and lets the Integer @1905@ in, because even though it's not *equal* to the Range, it's *included* in the
        set of Integers represented by the Range.  Which is good enough in some cases, such as the timeline I put
        together earlier.


        Which actually looked like a timeline, didn't it?  I mean, sure, @dr_chams_timeline@ method is code, but
        it does read like a timeline, clean and lovely.


        !i/elderly-2.gif(What research revealed.)!


