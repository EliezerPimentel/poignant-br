    - >
        h3. True (Verdadeiro)


        bq. @sujeito_aproximando = true@


        Eu vi o @true@ na buffet do hotel hoje.  Eu não suporto aquele cara.
        Ele aparece demais.  And you've never met anyone who planted his
        feet so hard in the ground.  He wears this corny necklace made out of
        shells.  His face exudes this brash confidence.  (You can tell he's exerting
        all of his restraint just to keep from bursting into Neo flight.)


        Pra ser honesto, não consigo ficar do lado de alguém que sempre tem de estar certo.
        Esse @true@ está sempre dizendo, "A-OK."  Flashing hang ten.  E é sério, 
        ele ama aquele colar.  Ele o usa constantemente.


        Assim como você suspeitou, ele é condição sine qua non em tudo que o @if@ agende.


        bq. @print "Hugo Boss" if true@ se comporta como @print "Hugo Boss"@.


        Ocasionalmente, o @if@ vai will haul out the velvet ropes to exercise some crowd control.  
        Os *dois iguais* dão a aparência de uma passarela, como cordas dos lados
        de um carpete vermelho onde só @true@ é aceito.


        <pre>
         if sujeito_aproximando == true
           print "Esse colar é clássico."
         end
        </pre>


        Os dois iguais são simplesmente *uma checagem de identificação*.  Os cavalheiros dos lados desta corda
        parecem ser iguais?


        Deste jeito, você controle quem o @if@ deixa entrar.  Se você não suporta o @true@ assim como eu,
        receba de peito aberto o @false@ (falso).


        <pre>
         if sujeito_aproximando == false
           print "Chega mais, seu diabo conivente."
         end
        </pre>


        Mesma coisa pra @unless@.  O portão é seu.  Tome o controle dele.


        h3. Novamente, Eu Quero Que Você Domine


        Agora, tá afim de uma viagem mental?  *O sinal de dois iguais é um método.*  Você consegue adivinhar
        como ele funciona?  Aqui, dê uma olhada nele com ponto e parentêses:


        bq. @sujeito_aproximando.==( true )@


        Ruby permite o atalho, sem problemas.  Jogue a ponto e vá pra trás devagar.


        Agora, você se lembra o que deve fazer pra *dominar* no Ruby?  _Use as respostas que
        os métodos te dão._


        <pre>
         if nil.==( true )
           print "Isto nunca vai acontecer."
         end
        </pre>


        No exemplo acima, como a resposta do método esta sendo usada?


        Pegue a afirmação @nil == true@.  Isso vai falhar toda hora.  Não são iguais.  
        Quando não há igualdade, o método dos dois iguais responde com @false@.  Uma balançada de cabeça.
        Esta resposta é dada ao @if@, que não pode aceitar um @false@.  O @print@ nunca acontecerá.


        <pre>
         no_hotel = true
         email = if no_hotel
                   "why@hotelambrose.com"
                 else
                   "why@drnhowardcham.com"
                 end
        </pre>


        Mesmo que @if@ não seja um método, o @if@ retorna uma resposta.  Observe o exemplo acima
        e imagine o que acontece quando @no_hotel@ é @true@.


        O @if@ retornará a resposta dada pelo código que ele decidir rodar.  No caso de 
        @no_hotel@ ser true, a primeira string, meu endereço de e-mail no Hotel Ambrose, será
        retornado.  A palavra reservada @else@ marca o código a ser rodado, uma vez que o @if@ falhe.  Se @no_hotel@
        é false, o @if@ responderá com meu endereço de e-mail do escritório do Dr. N. Howard Cham, 
        onde eu recebo meu aprendizado.


        Você deve ter várias linhas de código dentro de um @if@ ou @unless@, *mas somente a resposta oriunda
        da última afirmacão completa será usada*.


        <pre>
         email = if no_hotel
                   endereco = "why"
                   endereco << "@hotelambrose"
                   endereco << ".com"
                 end
        </pre>


        Três linhas de código dentro do @if@.  A primeira linha atribui uma string com meu nome dentro a uma variável.
        A segunda e terceira linha adicionam o resto do meu endereço de e-mail no fim.  O *menor que duplo @<<@
        é o operador da concatenação*.  Concatenar é o mesmo que *apender*, or *adicionar no fim*.


        Assim como vimos com o checador de igualdade @==@, o concatenador é um método.  Após adicionar no fim
        da string, o concatenador ainda *responde com aquela mesma stringt*.  Então, a terceira linha, que pode ser
        lida como as @endereco.<<( ".com" )@, retorna @endereco@, que o @if@ então devolve pra a atribuição @email@.


        Uma pergunta: E se o @if@ falhar?  E se @no_hotel@ for false no exemplo acimoa?
        Alguma coisa será retornada?  Nada é atribuído a @email@, certo?


        Sim, nada é retornado.  Que significa que: @nil@ foi retornado.  E @nil@ é muitas vezes uma
        resposta muito útil.

        
        <pre>
         print( if no_hotel.nil?
                  "Se pistas se ele está no hotel."
                elsif no_hotel == true
                  "Definitivamente sim."
                elsif no_hotel == false
                  "Ele saiu."
                else
                  "O sistema está traaaaav-iz"
                end )
        </pre>


        Você pode usar o método @nil?@ em qualquer valor no Ruby.  Denovo, pense nele com uma mensagem.
        Para o valor: "Você é nil?  Você está vazio?"


        Se @no_hotel@ estiver vazia, o Ruby não tem idéia se eu estou no hotel ou não.  Então o @if@
        responde com a string "Sem pistas".  Para manejar as possibilidades de @true@ ou @false@,
        a palavra reservada @elsif@ é usada.  Enquanto você pode ter apenas um @if@ e um @else@, você pode encher
        as entranhas com um exorbitante número de palavras chave @elsif@.  Cada @elsif@ age como *um outro teste @if@*.
        Checando por uma carga positiva.


        Se você está indo bem até este ponto, então você está em boa forma para o resto do
        livro.  Você viu um código bem parrudo nos últimos exemplos.  Você é um forte companheiro.


