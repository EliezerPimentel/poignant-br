    - >
        h3. True


        bq. @approaching_guy = true@


        I saw @true@ at the hotel buffet tables today.  I cannot stand that guy.
        His stance is way too wide.  And you've never met anyone who planted his
        feet so hard in the ground.  He wears this corny necklace made out of
        shells.  His face exudes this brash confidence.  (You can tell he's exerting
        all of his restraint just to keep from bursting into Neo flight.)


        To be honest, I can't be around someone who always has to be right.
        This @true@ is always saying, "A-OK."  Flashing hang ten.  And seriously, 
        he loves that necklace.  Wears it constantly.


        As you'd suspect, he's backstage at everything on the @if@ event schedule.


        bq. @print "Hugo Boss" if true@ acts like @print "Hugo Boss"@.


        Occassionally, @if@ will haul out the velvet ropes to exercise some crowd control.  
        The *double equals* gives the appearance of a short link of ropes, right along the
        sides of a red carpet where only @true@ can be admitted.


        <pre>
         if approaching_guy == true
           print "That necklace is classic."
         end
        </pre>


        The double equals is simply *an ID check*.  Do the gentleman at both ends of this
        rope appear to match?


        In this way, you control who @if@ lets in.  If you have a hard time getting along with
        @true@ as I do, you can heartily welcome @false@.


        <pre>
         if approaching_guy == false
           print "Get in here, you conniving devil."
         end
        </pre>


        Same goes for @unless@.  The gateway is yours.  Take possession of it.


        h3. Again, I Want You to Dominate


        Now, you want a head trip?  *The double equals sign is a method.*  Can you guess how
        it works?  Here, check it out with the dot and parens:


        bq. @approaching_guy.==( true )@


        Ruby allows the shortcut, though.  You can drop the dot and back away slowly.


        Now, do you remember what you need to do to *dominate* in Ruby?  _Use the answers the
        methods give you._


        <pre>
         if nil.==( true )
           print "This will never see realization."
         end
        </pre>


        In the above, how is the method's answer being used?


        Let's take the statement @nil == true@.  This will fail every time.  No match.  
        When there's no match, the double equals method answers with @false@.  A shake of the head.
        That answer is given to @if@, who can't accept a @false@.  The @print@ never sees realization.


        <pre>
         at_hotel = true
         email = if at_hotel
                   "why@hotelambrose.com"
                 else
                   "why@drnhowardcham.com"
                 end
        </pre>


        Even though @if@ isn't a method, @if@ does give a return answer.  Look at the above and
        wonder over what happens when @at_hotel@ is @true@.


        The @if@ will return the answer given by the code it chooses to run.  In the case of 
        @at_hotel@ being true, the first string, my e-mail address at Hotel Ambrose, will be
        returned.  The @else@ keyword marks code which will run, should @if@ fail.  If @at_hotel@
        is false, the @if@ will answer with my e-mail address at Dr. N. Howard Cham's office, 
        where I take my apprenticeship.


        Should you have several lines of code in an @if@ or @unless@, *only the answer from the
        last full statement will be used*.


        <pre>
         email = if at_hotel
                   address = "why"
                   address << "@hotelambrose"
                   address << ".com"
                 end
        </pre>


        Three lines of code inside the @if@.  The first line assigns a string with my name in it to a variable.
        The second and third lines add the rest of my e-mail address on to the end.  The *double less-than @<<@
        is the concatenation operator*.  To concatenate is to *append*, or *add to the end*.


        Just as we saw with the equality checker @==@, the concatenator is a method.  After adding to the end
        of the string, the concatenator also *answers with that very string*.  So, the third line, which could be
        read as @address.<<( ".com" )@, gives back @address@, which the @if@ then hands back for @email@'s
        assignment.


        Here's a question: what if the @if@ fails?  What if @at_hotel@ is false in the above example?
        Is anything returned?  Nothing is assigned to @email@, right?


        Yes, nothing is returned.  By which I mean: @nil@ is returned.  And often @nil@ is a very
        useful answer.

        
        <pre>
         print( if at_hotel.nil?
                  "No clue if he's in the hotel."
                elsif at_hotel == true
                  "Definitely in."
                elsif at_hotel == false
                  "He's out."
                else
                  "The system is on the freee-itz."
                end )
        </pre>


        You can use the @nil?@ method on any value in Ruby.  Again, think of it as a message.
        To the value: "Are you nil?  Are you empty?"


        If @at_hotel@ is empty, Ruby doesn't have any idea if I'm in the hotel or not.  So @if@
        answers with the "No clue" string.  In order to handle the @true@ or @false@ possibilities,
        the @elsif@ keyword is used.  While you can have only one @if@ and one @else@, you can fill
        the inbetween with an exorbitant number of @elsif@ keywords.  Each @elsif@ acts as *a further @if@
        test*.  Checking for a positive charge.


        If you're doing okay at this point, then you're in tip-top shape for the rest of the
        book.  You have seen some pretty tough code in the last few examples.  You strong fellow.


