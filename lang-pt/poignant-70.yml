    - >
        Grim prospects.  I can't ask you to return to the rabbit kingdom, though.
        Just pretend like you didn't die and make a whole new rabbit.


        <pre>
         irb> r = Rabbit.new

         # attacking with boomerang!
         irb> r ^ s

         # the hero's sword slashes!
         irb> r / s

         # eating lettuce gives you life!
         irb> r % s

         # you have three bombs!
         irb> r * s
        </pre>


        Pretty neat looking, wouldn't you say?  The code in @rabbit.rb@ alters a few math symbols
        which work only with the @Rabbit@.  Ruby allows you to change the behavior of math operators.  After all,
        *math operators are just methods!*


        <pre>
         # the boomerang is normally an XOR operator.
         irb> 1.^( 1 )
           => 0

         # the hero's sword normally divides numbers.
         irb> 10./( 2 )
           => 5

         # the lettuce gives the remainder of a division.
         irb> 10.%( 3 )
           => 1

         # the bomb is for multiplication.
         irb> 10.*( 3 )
           => 30
        </pre>


        Where it makes sense, you may choose to use math operators on some of your Classes.  Ruby
        uses these math operators on many of its own classes.  Arrays, for example, have a handful
        of math operators which you can see in the list of instance methods when you type: @ri Array@.


        <pre>
         # the plus operator combines two arrays into a single array
         irb> ["D", "W", "E"] + ["M", "T", "H", "Y"]
           => ["D", "W", "E", "M", "T", "H", "Y"]

         # minus removes all items in the second array found in the first
         irb> ["D", "W", "E", "M", "T", "H", "Y"] - ["W", "T"]
           => ["D", "E", "M", "H", "Y"]

         # the multiplier repeats the elements of an array
         irb> ["D", "W"] * 3
           => ["D", "W", "D", "W", "D", "W"]
        </pre>


        You may be wondering: what does this mean for math, though?  What if I add the number three
        to an array?  What if I add a string and a number?  *How is Ruby going to react?*


        Please remember these operators are just methods.  But, since these operators _aren't readable
        words_, it can be harder to tell what they do.  Use @ri@.  Often you'll find that the operators
        are identical to other readable methods.  You can then choose to use the operator or the method.
        Whichever is clearer to you.


        <pre>
         # divide with an operator method ...
         irb> 10 / 3
           => 3

         # ... or a readable method?
         irb> 10.div 3
           => 3
        </pre>


        And that's how the Rabbit's sword divides. 


        h3. The Harsh Realities of Dwemthy's Array AWAIT YOU TO MASH YOU!!


        Once you're done playchoking the last guy with his oxygen tube, it's time
        to enter The Array.  I doubt you can do it.  You left your hatchet at home.  And
        I hope you didn't use all your bombs on the easy guy.


        You have six foes.


        <pre>
         class IndustrialRaverMonkey < Creature
           life 46
           strength 35
           charisma 91
           weapon 2
         end

         class DwarvenAngel < Creature
           life 540
           strength 6
           charisma 144
           weapon 50
         end

         class AssistantViceTentacleAndOmbudsman < Creature
           life 320
           strength 6
           charisma 144
           weapon 50
         end

         class TeethDeer < Creature
           life 655
           strength 192
           charisma 19
           weapon 109
         end

         class IntrepidDecomposedCyclist < Creature
           life 901
           strength 560
           charisma 422
           weapon 105
         end

         class Dragon < Creature
           life 1340     # tough scales
           strength 451  # bristling veins
           charisma 1020 # toothy smile
           weapon 939    # fire breath
         end
        </pre>


        These are the living, breathing monstrosities of Dwemthy's Array.  I don't
        know how they got there.  No one knows.  Actually, I'm guessing the @IntrepidDecomposedCyclist@
        rode his ten-speed.  But the others: NO ONE knows.


        If it's really important for you to know, let's just say the others were born there.
        Can we move on??


        As Dwemthy's Array gets deeper, the challenge becomes more difficult.


        <pre>
         dwary = DwemthysArray[IndustrialRaverMonkey.new,
                               DwarvenAngel.new,
                               AssistantViceTentacleAndOmbudsman.new,
                               TeethDeer.new,
                               IntrepidDecomposedCyclist.new,
                               Dragon.new]
        </pre>


        Fight the Array and the monsters will appear as you go.  Godspeed
        and may you return with harrowing tales and nary an angel talon piercing
        through your shoulder.


        Start here:


        <pre>
         irb> r % dwary
        </pre>


        Oh, and none of this "I'm too young to die" business.  I'm sick of that crap.
        I'm not going to have you insulting our undead young people.  They are our future.
        After our future is over, that is.


        !i/wixl.dwemthy-3.gif(The rabbit has changed us.)!


        h3. The Making of Dwemthy's Array


        Fast forward to a time when the winds have calmed.  
        The dragon is vanquished.  The unwashed masses bow.  We love you.
        We are loyal to you.


        But what is this centipede nibbling in your eardrum?  You dig with your finger, but you can't
        get him out!  Blasted!  It's that infernal Dwemthy's Array again.  *Explain yourself
        Dwemthy!*


        Here, I shall unmask the Array itself for you.


        <pre>
         class DwemthysArray < Array
           alias _inspect inspect
           def inspect; "#<#{ self.class }#{ inspect }>"; end
           def method_missing( meth, *args )
             answer = first.send( meth, *args )
             if first.life <= 0
               shift
               if empty?
                 puts "[Whoa.  You decimated Dwemthy's Array!]"
               else
                 puts "[Get ready. #{ first.class } has emerged.]"
               end
             end
             answer || 0
           end
         end
        </pre>


        By now, you're probably feeling very familiar with inheritance.  The @DwemthysArray@ class
        inherits from @Array@ and, thus, behaves just like one.  For being such a mystery, it's
        alarmingly brief, yeah?


        So it's an Array.  Filled with monsters.  But what does this extra code do?


        h3. Inspect


        The @inspect@ method isn't really a necessary part of Dwemthy's Array.  It's something
        Dwemthy added as a courtesy to his guests.  (Many call him twisted, many call him 
        austere, but we'd all be ignorant to go without admiring the footwork he puts in for us.)        


        Every object in Ruby has an @inspect@ method.  It is defined in the @Object@ class,
        so it trickles down through the pedigree to every wee child object just born.


        <pre>
         irb> o = Object.new
           => #<Object:0x81d60c0>
         irb> o.inspect
           => "#<Object:0x81d60c0>"
        </pre>


        Have you noticed this?  Whenever we create an object in @irb@, this noisy @#<Object>@
        verbage stumbles out!  It's a little name badge for the object.  The @inspect@
        method creates that name badge.  The badge is just a string.


        <pre>
         irb> class Rabbit
         irb>   attr_accessor :slogan
         irb>   def initialize s; @slogan = s; end
         irb>   def inspect; "#<#{ self.class } says '#{ @slogan }'>"; end
         irb> end

         irb> class FakeRabbit < Rabbit
         irb> end

         irb> Rabbit.new "i blow'd the drgn's face off!!"
           => #<Rabbit says 'i blow'd the drgn's face off!!'>
         irb> FakeRabbit.new "Thusly and thusly and thusly..."
           => #<FakeRabbit says 'Thusly and thusly and thusly...'>
        </pre>

        
        The thing is: @irb@ is talking back.  Every time you run some code in @irb@,
        the _return value_ from that code is inspected.  How handy.  It's a little
        conversation between you and @irb@.  And @irb@ is just reiterating what you're
        saying so you can see it for your self.


        You could write your own Ruby prompt very easily:


        <pre>
         loop do
           print ">> "
           puts  "=> " + eval( gets ).inspect
         end
        </pre>
         

        This prompt won't let you write Ruby code longer than a single line.  It's the essence
        of interactive Ruby, though.  How do you like that?  Two of your recently learned concepts
        have come together in a most flavorful way.  The @eval@ takes the typed code and runs it.
        The response from @eval@ is then inspected.


        Now, as you are fighting monsters in @irb@, Dwemthy's Array will be inspected and
        replying with the monsters you have left to fight.


        !i/wixl-5.gif(The foxes eat out.)!


        h3. Method Missing


        Don't you hate it when you yell "Deirdre!" and like ten people answer?  That _never_ happens in
        Ruby.  If you call the @deirdre@ method, only one @deirdre@ method answers.  You can't have
        two methods named the same.  If you add a second @deirdre@ method, the first one disappears.


        You can, however, have a method which *answers to many names*.


        <pre>
         class NameCaller
           def method_missing( name, *args )
             puts "You're calling `" + name + "' and you say:"
             args.each { |say| puts "  " + say }
             puts "But no one is there yet."
           end
           def deirdre( *args )
             puts "Deirdre is right here and you say:"
             args.each { |say| puts "  " + say }
             puts "And she loves every second of it."
             puts "(I think she thinks you're poetic.)"
         end
        </pre>


        When you call the method @deirdre@ above, I'm sure you know what will happen.  Deirdre will
        love every second of it, you and your dazzling poetry.


        But what if you call @simon@?


        <pre>
         irb> NameCaller.new.simon( 'Hello?', 'Hello? Simon?' )
         You're calling `simon' and you say:
           Hello?
           Hello? Simon?
         But no one is there yet.
        </pre>
        

        Yes, @method_missing@ is like an answering machine, which intercepts your method call.  In Dwemthy's
        Array we use call forwarding, so that when you attack the Array, it passes that attack on straight to
        the first monster in the Array.


        <pre>
         def method_missing( meth, *args )
           answer = first.send( meth, *args )
           # ... snipped code here ...
         end
        </pre>


        See!  See!  That skinny little @method_missing@ passes the buck!


