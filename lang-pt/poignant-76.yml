    - >
        "All that writing on the cloud is deer talk?" said Fox Small.


        "Help!  _Where are you guys?_"  The taller fox ducked through a stormy tirade comprised of
        thick, billowing smoke and sharp wisps.  He whirled in every direction, "Somebody yell if you're
        there!"
        
        
        He searched for a fissure in the dense matter, combing forward with his hands.  The verbose, angry
        clouds responded by prodding him ahead, forcing him into tight corners in their brief pause
        between sentences.  He landed in a sinkhole and kept his head down as the cascades of smoke
        surged forward.


        "Yeah, deer can read this stuff," said Blix.  "They just face their target and shoot it out of
        their nostrils.  I once heard of a guy who *rode* a stag's love poem."


        "No way," said Fox Small.


        "Yep," said Blix.  "And that guy was me."  Blix reached over his shoulder and latched onto
        a spiral column of smoke that was twisting just above his head.  "You just have to know
        which clouds are wimpy and which clouds are grandiloquent."  Blix let the cloud pull him along
        and when the cloud banked upwards, Blix loosed his grip and kept his feet moving slowly
        along the ground.  "See, here's a good one, long like a broom handle.  A guy found one once
        and it was shaped _exactly_ like a car: windshield, driver's side airbag, power steering.
        Uncanny!"


        "_And that guy was--_"


        *"It was!"*  And Blix climbed up atop the long icy cloud, with its dangling glyphs, and stood proudly,
        floating high above the small fox's pointy shadow.


        "Oh, I could do that," said Fox Small.  "Tall and I go jetskiing all the time.  _I've stood
        up on my jetski._  It's just like that."


        Fox Tall dashed through a descending puff, shattering its sentence, which letters
        came unglued and littered the ground with scrambled words, but he had only succeeded in
        reaching the depressive portions of the deer correspondence, which manifested itself
        as a dank and opaque mist.


        Meanwhile, his smaller counterpart grabbed a narrow train of smoke that passed under his
        arm.  He was airborned and yelled, *"Tallyho!"*  But he held too tightly and the cloud
        evaporated under his arm and sent him back down with a short hop.


        Since you're just beginning your use of Ruby, you may not fully grasp regular expressions
        (or _regexps_) at first.  You may even find yourself clipping out regexps from the "Regular
        Expression Library":http://regexlib.com/DisplayPatterns.aspx and pasting them into your
        code without having the foggiest idea why the expression works.  Or _if_ it works!


        <pre>
         loop do
           print "Enter your password: "
           password = gets
           if password.match( /^\w{8,15}$/ )
             break
           else
             puts "** Bad password! Must be 8 to 15 characters!"
           end
         end
        </pre>
         

        Do you see the unreadable deer language in the example code?  The @/^\w{8,15)$/@ is a regular
        expression.  If I may translate, the regexp is saying, _Please only allow letters, numbers or
        underscores.  No less than eight and no more than fifteen._


        Regular expressions are a mini-language built into Ruby and many other programming languages.
        I really shouldn't say _mini_, though, since regexps can be twisted and complicated and much more
        difficult than any Ruby program.


        Using regular expressions is extremely simple.  It is like the Deer: making the smoke is an
        arduous process.  But hooking your elbow around the smoke and driving it to the Weinerschnitzel
        to get mustard pretzel dogs is easy.


        <pre>
         irb> "good_password".match( /^\w{8,15}$/ )
           => #<MatchData:0xb7d54218>
         irb> "this_bad_password_too_long".match( /^\w{8,15}$/ )
           => nil
        </pre>


        The @String#match@ method is the _simplest practical use_ of regexps.  The @match@ method
        checks to see if the string meets the rules inside the regexp.  A regexp is only useful with
        strings, to test strings for a series of conditions.  If the conditions are met, a @MatchData@
        object is returned.  If not, you get @nil@.


        The most basic regular expressions are for *performing searches* inside strings.  Let's say
        you've got a big file and you want to search it for a word or phrase.  Since a bit of time
        has passed, let's search the Preeventualist's Losing and Finding Registry again.


        <pre>
         require 'preeventualist'
         PreEventualist.searchfound( 'truck' ) do |page|
           page.each_line do |line|
             puts line if line.match( /truck/ )
           end
         end
        </pre>


        This isn't too different from the code we used earlier to search for lines with the word "truck".  Earlier
        we used @puts line if line['truck']@, which is actually a simpler way of searching a string, if you're
        just looking for a simple word.  The regexp @/truck/@ is identical.  Find the word "truck".  Anywhere in the string.


        Uhm, what if truck is capitalized.  *Truck.*  What then?


        <pre>
         puts line if line.match( /[Tt][Rr][Uu][Cc][Kk]/i )
        </pre>


        The *character classes* are the sections surrounded by *square brackets*.  Each character class gives
        a list of characters which are valid matches for that spot.  (The first spot matches either an uppercase @T@
        or a lowercase @t@.  The second spot matches an @R@ or an @r@.  And so on.)


        But a simpler way to write it is like this:


        <pre>
         puts line if line.match( /truck/i )
        </pre>


        The letter @i@ modifier at the end of the regexp indicates that the search is *not case-sensitive*.  It
        will match Truck.  And TRUCK.  And TrUcK.  And other ups and downs.


        Oh, and maybe you're truck is a certain model number.  A T-1000.  Or a T-2000.  You can't remember.  It's
        a T _something_ thousand.


        <pre>
         puts line if line.match( /T-\d000/ )
        </pre>


        See, deer language.  The @\d@ represents a *digit*.  It's a place holder in the regexp for any type of
        number.  The regexp will now match T-1000, T-2000, all the way up to T-9000.


        |\3. *Character Classes* |

        | @\d@ | matches digits | can also be written @[0-9]@ |

        | @\w@ | matches word characters (letters, numbers and the underscore) | can also be written @[A-Za-z0-9_]@ |

        | @\s@ | matches whitespace (spaces, tabs, carriage returns, line feeds) | a.k.a. @[ \t\r\n]@ |

        | @\D@ | matches everything _but_ digits | a negated set @[^\d]@ |
        
        | @\W@ | matches everything _but_ word chars | just like @[^\w]@ |
        
        | @\S@ | matches everything _but_ whitespace | also @[^\s]@ |

        | @.@ | the period matches *everything*. |


        Building a regexp involves chaining these placeholders together to express your search.  If you're looking for
        a number, followed by whitespace: @/\d\s/@.  If you're looking for three numbers in a row: @/\d\d\d/@.  *The opening
        and closing slashes mark the beginning and end of the regexp.*


        A search for three numbers in a row can also be written as: @/\d{3}/@.  Immediately following a character class
        like @\d@, you can use a quantifier symbol to mark how many times you want the character class to be repeat.


        |\3. *Quantifiers* |

        | @{n}@ | match exactly _n_ times | Precisely three numbers in a row is @/\d{3}/@ |

        | @{n,}@ | matches _n_ times or _more_ | Three or more letters in a row is @/[a-z]{3,}/i@ |

        | @{n,n2}@ | matches at least _n_ times but no more than _n2_ times | So, @/[\d,]{3,9}/@ matches
        between three and nine characters which are numbers or commas |

        | @*@ | the asterisk @*@ is short for @{0,}@ | To match a colon, followed by zero or more word characters: @/:\w*/@ |

        | @+@ | the plus is short for @{1,}@ | To match one or more minus or plus signs, use @/[-+]+/@ |

        | @?@ | the question mark is short for @{0,1}@ | To match three numbers followed by an optional period: @/\d{3}[.]?/@ |


        A really common regular expression is for matching phone numbers.  American phone numbers (including an area
        code) can be matched using the digit character class and the precise quantifiers.


        <pre>
         irb> "Call 909-375-4434" =~ /\d{3}-\d{3}-\d{4}/
           => 5
         irb> "The number is (909) 375-4434" =~ /[(]\d{3}[)]\s*\d{3}-\d{4}/
           => 14
        </pre>


        This time, instead of using @match@ to search for the expression, the @=~@ operator was used.  This operator is the
        *match operator*, an equals sign followed by *a tilde*.  The tilde is like a bit of smoke coming off the edge of a
        smokestack.  Remember the deer, the smoke they blow, a cryptic language just like regular expressions.  The smoky
        tilde points toward the regexp.


        The match operator returns a number.  The number is the spot in the string where the regular expression matched.
        So when the match operator returns @5@, it's saying, "Before the match, there are five characters in the string."


        If you need to get the full string matched, you can use the special @$&@ global variable if you're using the
        match operator.  Or, if you're using the @match@ method, you can get the full string by converting the @MatchData@ object
        to a string.


        <pre>
         # Using =~ and $& together.
         irb> "The number is (909) 375-4434" =~ /[(]\d{3}[)]\s*\d{3}-\d{4}/
           => 14
         irb> $&
           => "(909) 375-4434"

         # Using the MatchData object.
         irb> phone = /[(]\d{3}[)]\s*\d{3}-\d{4}/.match("The number is (909) 375-4434")     
           => #<MatchData:0xb7d51680>
         irb> phone.to_s
           => "(909) 375-4434"
        </pre>


        Most Rubyists prefer the second approach, as it uses an object within a _local variable_ rather than a _global variable_.
        Global variables are kind of sketchy, since they can be easily overwritten.  If you run two regular expressions in a
        row, the global variable gets overwritten the second time.  But with local variables, you can keep both matches around
        as long as the variables are named differently.


        Other than matching, another common use of regular expression is to do *search-and-replace* from within Ruby.
        You can search for the word "cat" and replace it with the word "banjo."  Sure, you can do that with strings or regexps.


        <pre>
         irb> song = "I swiped your cat / And I stole your cathodes"
         irb> song.gsub 'cat', 'banjo'
           => "I swiped your banjo / And I stole your banjohodes"

         irb> song.gsub /\bcat\b/, 'banjo'
           => "I swiped your banjo / And I stole your cathodes"
        </pre>


        The @gsub@ method is named for "global substitution."  Notice how in the first example it replaced the word "cat" and the first
        three letters of "cathodes."  Strings also have a simple @sub@ method which will substite only once.


        And so this chapter ends, with Blix and the Foxes cruising aloft the solid pink belched from a very outspoken
        deer somewhere in those pastures.


#        Using regular expressions for substitution is incredibly sly.  
#
#
#        |\3. *Positional Marks* |
#
#        | @^@ | matches the beginning of a line | Test a string for a starting pound sign: @/^#/@ |
#
#        | @$@ | matches the end of a line | Look for empty lines: @/^\s*$/@ |
#
#        | @\b@ | matches the edge of a word, beginning or end | Find words which start with a vowel: @/\b[aeiou]/@ |
#
#        | @\A@ | matches the beginning of the string | Check if a string opens with a greeting: @/AHello/@ |
#
#        | @\z@ | matches the end of the string | Ensure a string contains only word characters: @/\A\w\z/@ |
#
#
#        h3. Scanning for Matches
#
#
#        <pre>
#         def load_dictionary( filename )
#           hsh = {}
#           File.read( filename ).scan( /(.+): (.+)/ ) do |k, v|
#             hsh[k] = v
#           end
#         end
#        </pre>
#
#
#        If I can offer one piece of advice with regard to regular expressions, it's this: be yourself.  Don't get so
#        wrapped up in regular expressions that you forget who you are.
#
#
