    - The Continued Story of My Daughter's Organ Instructor: >

        I know you may be alarmed to hear that I have a daughter.  You think my writing is indicative
        of a palsied or infantile mind.  Well, please rest.  I don't have a daughter.
        But I can't let that stop me from sorting out her musical training.


        As I was related these elaborate histories of the planet Endertromb, I found myself
        wandering through hallways, running my fingertips along the tightly buttoned sofas
        and soaking myself in the saturated bellowings of the pipes, as played by my daughter's
        organ instructor.  His notes resounded so deep and hollow in the walls of his manor
        that I began to casually mistake them for an ominous silence, and found it even
        easier to retreat into deep space with my thoughts.  To think upon the ancient
        planet and its darker philosophies: its flesh temples, tanned from the dermal remains
        of its martyrs; its whale cartels, ingesting their enemies and holding them within for
        decades, dragging them up and down the staircases of ribs; its poison fogs and its
        painful doorways; and, the atrocious dynasties
        of The Originals, the species which claims fathership to all of the intellegent beings
        across the universe.


        But, eventually, I'd hear those pipes of a higher octave sing and I'd be back in the very same
        breezy afternoon where I'd left.


        How interesting that even the breeze of our planet is quite a strange thing to some
        outsiders.  For he had also told me of the travellers from Rath-d, who ventured to Earth
        five centuries ago, but quickly dissipated in our air currents since they and their crafts
        and their armor were all composed of charcoal.


        I had sat at the organ, listening to his faint tales of his colony, while he punctuated his
        symphonies to greater volumes and the story would disappear for awhile, until the coda came back around.
        He spoke of he and his brothers piling into the hollow of his mother's tail and tearing the
        waxy crescent tissue from the inner wall.  Juicy and spongy and syrupy soap which bleached
        their mouths and purged their esophagus as it went down.  They chewed and chomped the stuff
        and it foamed.  After they ate, they blew bubbles at each other, each bubble filled with a dense
        foam, which they slept upon.  And early in the morning, when mother opened her tail again, she watched
        serenely as her babies lay cradled in the stew of dark meatballs and sweet, sticky froth.

        
        He spelled out all the tastes of Endertromb.  Of their salmon's starchy organs, which cooked
        into a pasta, and its eyes which melted into rich cream.  Of their buttermelon with tentacles.
        And he was just beginning to appreciate the delicacies as a child, only to be lifted from a
        schoolyard by a pair of upright pygmy elephants who reached at him, through the heavens, and
        snatched upon his collar with a vast length of crane.


        They transplanted him on Earth, led him from their craft, trumpeting their snouts loudly for the city of
        Grand Rapids to hear, then left, weeping and embracing each other.


        "Mas, estranhamente (em-pithy-dah), Eu aprendi, toquei (pon-shoo) nos órgãos no meu planeta
        (oth-rea) natal," ele disse.


        O instrutor de órgão da minha filha fala essas palavras extras que você vê em parênteses.  Quem é
        que sabe se é sua língua nativa ou seu soluço sonoro.  Ele mantém outro
        traço de Endertromb: ele tem doze nomes.


        "Não, (wen-is-wen)," ele disse.  "Eu tenho um nome (im-apalla) que é dito (iff)
        de muitas-muitas maneiras difentes."


        Eu o chamo de Paij-ree nas manhãs e Paij-plo de tarde.
        Já que estou escrevendo de dia, o chamarei de Paij-ree aqui.


        h3. Protetores de Ouvido Múrmurio-Free


        !>i/my.daughters.organ-1.gif(Alien at the keys.)!


        Então eu disse a Paij-ree, "Paij-ree, eu estou escrevendo um livro.  Para ensinar ao mundo Ruby."


        "Oh, (pill-nog-pill-yacht) bacana," ele disse.  Ele conhece Ruby há mais tempo que eu, mas mesmo assim:
        _Eu_ serei o instrutor de Ruby da minha filha.


        E eu disse, "Paij-ree, você está no livro.  E as estórias do seu planeta."  Eu falo com ele como
        se ele fosse o E.T.  Eu não sei porquê. Como o que disse em seguida, "E daí talvez algum dia
        você possa ir pra casa pro seu pai e pra sua mãe!"


        Ele replicou, "(pon-shoo) (pon-shoo) (em-pithy-dah)."  Que é o jeito dele de expressar
        out loud seu silêncio e temor.


        Ele queria ver o que eu havia escrito, então eu mostrei a ele este pequeno método que escrevi pra você.
    

        <pre>
         def limpar_murmurios_de( frase )
           while frase.include? '('
             abre = frase.index( '(' )
             fecha = frase.index( ')', abre )
             frase[abre..fecha] = '' if fecha
           end
         end
        </pre>


        "Viu o que isto faz, Paij-ree?  Qualquer Smotchkkiss velho pode usar este método
        pra remover todas as o take all the incoherent babblings out of your speaking," I said.


        E eu alimentei o método com algo que ele havia dito mais cedo.


        <pre>
         o_que_ele_disse = "Mas, estranhamente (em-pithy-dah), 
         Eu aprendi, toquei (pon-shoo) em órgãos no meu planeta
         (oth-rea) natal."
         limpar_murmurios_de( o_que_ele_disse )
         print o_que_ele_disse
        </pre>


        E saiu de certa forma uma frase mais clara.


        <pre>
        Mas, estranhamente , 
        Eu aprendi, toquei em órgãos no meu planeta
        natal.
        </pre>


        "You shouldn't use that (wary-to) while loop," he said.  "There are lovelier, (thopt-er),
        gentler ways."


        No método @limpar_murmurios_de@, estou basicamente procurando por abre parênteses.  Quando eu
        encontrou um, eu procuro um fecha parênteses na sequencia.  Uma vez que tenha encontrado ambos, eu troco
        eles e seu conteúdo por uma string vazia.  O loop @while@ continua até que todos os parênteses se acabem.
        Os murmúrios são removidos e o método termina.


        "Agora olhando este método," eu disse.  "Eu vejo que há alguns aspectos confusos 
        e outras coisas que eu poderia ter feito melhor."  Por favor não me olhe estranho por seu professor 
        ter escrito este código.  Eu acho certo the mostrar algumas técnicas sloppy techniques 
        pra te ajudar  to help you work through them with me.  Então vamos.


        Okay, *Aspecto confuso No. 1*: Este método limpa uma string.  Mas e se nós acidentalmente
        dermos a ele um @File@?  Ou um número?  O que acontece?  E se rodarmos @limpar_murmurios_de( 1 )@?


        Se nós dermos ao @limpar_murmurios_de@ o número 1, o Ruby irá imprimir o seguinte e depois sair.


        <pre>
         NoMethodError: undefined method `include?' for 1:Fixnum
                 from (irb):2:in `limpar_murmurios_de'
                 from (irb):8
        </pre>


        O que você vê aquiere is a rather twisted and verbose (but at times very helpful) little fellow
        called the *backtrace*.  He's a wound-up policeman who, ao menor sinal de problema,
        imediatamente apreende todo e qualquer suspeito, os põe contra a parede all and spelling out their
        rights so quickly that none can quite hear it all.  But it's plain that there's
        a problem.  E, é claro, não passou de um mal entendido, certo?


        When Ruby reads you these Miranda rights, listen hardest to the beginning.  The first line
        is often all you need.  In this first line is contained the essential message.  And in
        the above, the first line is telling us that there is no @include?@ method for the number 1.
        Remember, when we were talking about the @reverse@ method in the last chapter?  Back then, I said,
        "*a lot of methods are only available with certain types of values*."  Both @reverse@ and
        @include?@ are methods which work with strings but are meaningless and unavailable for numbers.


        To be clear: the method tries to use to the number.  The method will start with @frase@ set to 1.
        Então, ele chega na segunda linha: @while frase.include? '('@.  Números não têm método @include?@.
        Great, the backtrace has shown us where the problem is.  I didn't expect anyone to pass in
        a number, so I'm using methods that don't work with numbers.


        *See, this is just it.*  Our method is its own little pocket tool, right?  It acts as its own
        widget independent of anything else.  To anyone out there using the @limpar_murmurios_de@
        method, should they pass in a number, they'll be tossed this panic message that doesn't
        make sense to them.  They'll be asked to poke around inside the method, which really isn't
        their business.  They don't know their way around in there.


        Felizmente, nós podemos inserir nossos próprios erros, nossas próprias *exceções*, o que pode fazer mais
        sentido à alguém que sem avisowho inadvertantly hands the wrong object in for cleaning.


        <pre>
         def limpar_murmurios_de( frase )
           unless frase.respond_to? :include?
             raise ArgumentError, 
              "não posso limpar os múrmurios de um(a) #{ frase.class }"
           end
           while frase.include? '('
             abre = frase.index( '(' )
             fecha = frase.index( ')', abre )
             frase[abre..fecha] = '' if fecha
           end
         end
        </pre>


        Desta vez, se passarmos um número (de novo, o número 1), we'll get something more sensible.


        <pre>
         ArgumentError: não posso limpar os múrmurios de um(a) Fixnum
                 from (irb):3:in `limpar_murmurios_de'
                 from (irb):12
        </pre>


        O método @respond_to?@ é realmente bacana e eu imploro que você nunca se esqueça dele.
        O @respond_to?@ checa qualquer objeto para garantir que ele tenha um certo método.  Ele então retorna
        com @true@ o @false@.  No caso acima, é checado se o objeto @frase@ recebido tem um método
        @include?@.  Se nenhum método @include?@ for encontrado, então causamos o erro.


        Você deve estar pensando por que eu usei um símbolo com o @respond_to?@.  Eu usei um símbolo @:include?@
        invés da string @'include?'@.  Na verdade, ambos funcionarão com o @respond_to?@.


        Geralmente símbolos são usados quando você está passando o nome de um método ou qualquer outro contru.
        É mais eficiente, but it also catches the eye.  The @respond_to?@ asks Ruby to look inside itself
        and see if a method is available.  We're talking to Ruby, so the symbol helps denote that.  It's not
        a big deal, Ruby just recognizes symbols quicker than strings.


        Agora, *Aspecto Confuso No. 2*: Você notou como nosso método modifica a frase?


        <pre>
         algo_dito = "Uma espaçonave (gith)."
         limpar_murmurios_de( algo_dito )
         print algo_dito
        </pre>


        Você notou isso?  Na primeira linha do código acima, a variável @algo_dito@
        contém a string @"Uma espaçonave (gith)."@.  Mas, depois de invocar o método, na terceira
        linha, nós imprimimos a variável @algo_dito@  and by then it contains the cleaned
        string @"A  spaceship."@.


        Como isso funciona?  Como o método modifica a string?  Ele não deveria fazer uma cópia
        da string antes de modificá-la?


        Sim, absolutamente, it should!  *It's bad manners to change strings like that.*  We've used @gsub@ and
        @gsub!@ in the last chapter.  Do you remember which of those two methods is a *destructive
        method*, which changes strings directly?


        Ou nós chamamos este método de @limpar_murmurios_de!@ (cortesia a todos os colegas bacanas
        por aí que podem vir a usar este método) ou modificar o método para trabalhar em uma cópia
        da string invés da coisa real.  O que é uma modificação muito fácil!  Nós só precisamos dar
        um @dup@ na string.


        <pre>
         def limpar_murmurios_de( frase )
           unless frase.respond_to? :include?
             raise ArgumentError, 
              "não posso limpar os múrmurios de um(a) #{ frase.class }"
           end
           frase = frase.dup
           while frase.include? '('
             abre = frase.index( '(' )
             fecha = frase.index( ')', abre )
             frase[abre..fecha] = '' if fecha
           end
           frase
         end
        </pre>


        O método @dup@ faz uma cópia de qualquer objeto.  Veja a linha que adicionamos separada:


        <pre>
         frase = frase.dup
        </pre>


        Que linha de código peculiar.  Como que @frase@ vira uma cópia de @frase@?
        Ela se apaga?  O que acontece com a @frase@ original?  Ela desaparece?


        Lembre que variáveis são como apelidos.  Quando você vê @frase = "Uma espaçonave (gith)."@,
        você o Ruby criando uma string e então dando um apelido a essa string.


        Do mesmo modo, quando você vê @frase = frase.dup@, você ve o Ruby criando uma nova string e então
        dando um apelido a essa string.  Iso é útil dentro do seu método porque agora @frase@ é
        um pelido para uma nova cópia da string que você pode usar seguramente *sem modificar a string
        que foi passada pro método*.


        Você vai ver muitos examplos de nomes de variáveis seudo reusados.


        <pre>
         x = 5
         x = x + 1
         # x agora é igual a 6

         y = "Endertromb"
         y = y.length
         # y agora é igual a 10
         
         z = :include?
         z = "a string".respond_to? z
         # z agora é igual a true
        </pre>


        E, sim, algumas vezes objetos desaparecem.  *Se você não consege pegar um objeto por uma váriavel, then
        Ruby will figure you are done with it and will get rid of it.*  Periodicamente, o Ruby envia seu 
        *garbage collector (coletor de lixo)* to set these objects free.  Todo objeto é mantido na memória do seu computador
        até que o coletor de lixo se livre dele.


