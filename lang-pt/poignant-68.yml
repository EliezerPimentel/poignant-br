    - >
        Metaprogramming is _writing code which writes code_.  But not as M.C. Escher would sketch it.  *The program isn't reaching
        back around and overwriting itself, nor is the program jumping onto your screen and wrenching the keyboard from your
        hands.*  No, it's much smaller than that.


        Let's say it's more like *a little orange pill* you won at the circus.  When you suck on it, the coating wears away and
        behind your teeth hatches a massive, floppy sponge brontosaurus.  He slides down your tongue and leaps free, frollicking 
        over the pastures, yelping, "Papa!"  And from then on, whenever he freaks out and attacks a van, well, that van is _sparkling
        clean_ afterwards.


        Now, let's say _someone else_ puts *their little orange pill* under the faucet.  Not on their tongue, _under the faucet_.  And this triggers a different catalysm, which
        births a set of wailing sponge sextuplets.  *Umbilical cords and everything.*  Still very handy for cleaning the van.
        But an altogether different kind of chamois.  And, one day, these eight will stir Papa to tears when they perform the
        violin concerto of their lives.


        Metaprogramming is packing code into pill-form, such that a slender drop of water could trigger it to expand.
        More importantly, you can control the pill's reaction, so that a brontosaurus is produced, scaly and lumbering.
        Or septulets, *CERTAINLY*.  Or seamstresses.  Or cat brains.  Or dragons.


        <pre>
         class Dragon < Creature
           life 1340     # tough scales
           strength 451  # bristling veins
           charisma 1020 # toothy smile
           weapon 939    # fire breath
         end
        </pre>


        This is not metaprogramming yet.  Only the pill.  The _product_ of metaprogramming.  We are pausing, looking at
        the beast itself before descending beneath its flesh with a scalpel and microscope.


        The @Dragon@ is a class.  You've seen that many times now.  The @Dragon@ is a descendant of the @Creature@ class.


        Now, eyes up.  Look at me.  The @Creature@ class contains the metaprogramming code.  You can write metaprogramming
        code which can be used _everywhere_, throughout Ruby, in @Creature@ or @Dragon@, in @String@ or in @Object@, anywhere.
        Our example here, since this is the most common form of meta-code, focuses on metaprogramming inside your own
        classes only.


        Each of the @Dragon@'s traits are simply *class methods*.  You could also write this as:


        <pre>
         class Dragon < Creature
           life( 1340 )     # tough scales
           strength( 451 )  # bristling veins
           charisma( 1020 ) # toothy smile
           weapon( 939 )    # fire breath
         end
        </pre>


        Removing the parens removes clutter, so let's leave them out.  Only use parens when you are using
        several methods together and you want to be very clear.


        h3. Creature Code


        Now, with a lateral slice across the diaphragm, we expose the innards of @Creature@.  *Save this
        code into a file called @dwemthy.rb@.*


        <pre>
         # The guts of life force within Dwemthy's Array
         class Creature

           # Get a metaclass for this class
           def self.metaclass; class << self; self; end; end

           # Advanced metaprogramming code for nice, clean traits
           def self.traits( *arr )
             return @traits if arr.empty?

             # 1. Set up accessors for each variable
             attr_accessor *arr

             # 2. Add a new class method to for each trait.
             arr.each do |a|
               metaclass.instance_eval do
                 define_method( a ) do |val|
                   @traits ||= {}
                   @traits[a] = val
                 end
               end
             end

             # 3. For each monster, the `initialize' method
             #    should use the default number for each trait.
             class_eval do
               define_method( :initialize ) do
                 self.class.traits.each do |k,v|
                   instance_variable_set("@#{k}", v)
                 end
               end
             end

           end

           # Creature attributes are read-only
           traits :life, :strength, :charisma, :weapon
         end
        </pre>


        Focus on the closing lines of code, specifically the line where the @traits@ are
        being set up.  All of the code before that line sets up the @traits@ class
        method.  This bears resemblance to the basic lottery tickets from the chapter previous.
        

        <pre>
         class LotteryTicket
           attr_reader :picks, :purchased
         end
        </pre>


        Both @traits@ and @attr_reader@ are simply class methods.  When @attr_reader@ is used in the @LotteryTicket@,
        metaprogramming kicks in behind the scenes and starts blowing up balloons, creating
        *reader* methods for the instance variables @@picks@ and @@purchased@ above.


        The code for the @traits@ method is the metaprogramming I've been alluding to.
        Comments in the code reveal the three stages the method goes through when adding
        traits.


        # The *list of traits is passed on to @attr_accessor@*, which builds *reader* and
        *writer* code for instance variables.  One for each trait.

        # *Class methods are added* for each trait.  (A @life@ class method is added for a @:life@
        trait.)  These class methods are used
        in the class definition just like you would use @traits@ or @attr_accessor@.  This way, you can specify
        the trait, along with the points given for a trait to a certain creature.

        # *Add an initialize method* which sets up a new monster properly,
        grabbing the right points and _POWER UP! POWER UP!_ the monster is
        alive!


        The beauty of these three steps is that you've taught Ruby how to code
        monsters for you.  So when Ruby gets to the @traits@:


        <pre>
         class Creature
           traits :life, :strength, :charisma, :weapon
         end
        </pre>


        Ruby fills in the code behind the scenes and transplants a spiny green
        heart and jumpstarts the body with a pullcord.
        Ruby will use the metaprogramming from the @Creature@ class and build
        out all the various methods, expanding the @traits@ list like this:


        <pre>
         class Creature
         
           # 1. set up reader and writer methods
           attr_accessor :life, :strength, :charisma, :weapon

           # 2. add new class methods to use in creature
           def self.life( val )
             @traits ||= {}
             @traits['life'] = val
           end

           def self.strength( val )
             @traits ||= {}
             @traits['strength'] = val
           end

           def self.charisma( val )
             @traits ||= {}
             @traits['charisma'] = val
           end

           def self.weapon( val )
             @traits ||= {}
             @traits['weapon'] = val
           end

           # 3. initialize sets the default points for
           #    each trait
           def initialize
             self.class.traits.each do |k,v|
               instance_variable_set("@#{k}", v)
             end
           end

         end
        </pre>


        Now, Ruby will gladly accept this
        six-line @Dragon@ code, short enough to look nice when printed on playing
        cards:


        <pre>
         class Dragon < Creature
           life 1340     # tough scales
           strength 451  # bristling veins
           charisma 1020 # toothy smile
           weapon 939    # fire breath
         end
        </pre>


        h3. Eval, the Littlest Metaprogrammer


        While the metaprogramming code above is just plain Ruby, it can be difficult to follow still.
        I totally understand if you've come to this point and your eyes are spinning in their sockets
        and your knees have locked up.  The trickiest parts of the above are the lines which call
        the methods @instance_eval@ and @class_eval@.  Just rub some tiger balm on your joints while
        I talk about @eval@.


        We've been talking about *metaprogramming*.  Writing code which writes code.  The @eval@
        method hangs out in this alley.
        The vagrant @eval@ takes code you have stored up in a string and it executes that code.


        <pre>
         drgn = Dragon.new
         # is identical to...
         drgn = eval( "Dragon.new" )
         # or, alternatively...
         eval( "drgn = Dragon.new" )
        </pre>


        Here, let's write a program which has a hole in it.  Instead of writing a program
        which creates a new @Dragon@, let's leave a hole where the @Dragon@ would be.


        <pre>
         print "What monster class have you come to battle? "
         monster_class = gets
         eval( "monster = " + monster_class + ".new" )
         p monster
        </pre>


        The program asks for a monster.  If you type in @Dragon@, then the @monster_class@ variable
        will contain the string @"Dragon"@.  Inside the @eval@, a few strings get added together
        to make the string @"monster = Dragon.new"@.  And when the @eval@ executes this string,
        the @monster@ variable contains a @Dragon@ object.  Ready for battle.


        This is great!  Now we can leave it up to the player to pick a monster!  Of course,
        we're trusting the player to supply a real monster class.  If they type in @BotanicalWitch@
        and there is no @BotanicalWitch@ class, they'll get an exception tossed in their face.


        So, in short, @eval@ lets you make up code as you go.  Which can be useful and which can
        be dangerous as well.


        The @instance_eval@ and @class_eval@ method used in the metaprogramming for the @Creature@
        class are slightly different from the normal @eval@.  These two special methods run code just like
        @eval@ does, but they duck into classes and objects and run the code there.


        <pre>
         # The instance_eval method runs code as if it were run inside an
         # object's instance method.
         irb> drgn = Dragon.new
         irb> drgn.instance_eval do
         irb>   @name = "Tobias"
         irb> end

         irb> drgn.instance_variable_get( "@name" )
           => "Tobias"

         # The class_eval method runs code is if inside a class definition.
         irb> Dragon.class_eval do
         irb>   def name; @name; end
         irb> end

         irb> drgn.name
           => "Tobias"
        </pre>


        As you can see above, the @instance_eval@ and @class_eval@ methods also can take a code block
        instead of a string.  Which is just how things are done in Dwemthy's Array.


        h3. Enough Belittling Instruction and Sly Juxtaposition -- Where Is Dwemthy's Array??


        Tread carefully -- here is *the other half of DWEMTHY'S ARRAY!!*
        *Add these lines to @dwemthy.rb@.*


        <pre>
         class Creature

           # This method applies a hit taken during a fight.
           def hit( damage )
             p_up = rand( charisma )
             if p_up % 9 == 7
               @life += p_up / 4
               puts "[#{ self.class } magick powers up #{ p_up }!]"
             end 
             @life -= damage
             puts "[#{ self.class } has died.]" if @life <= 0
           end

           # This method takes one turn in a fight.
           def fight( enemy, weapon )
             if life <= 0
               puts "[#{ self.class } is too dead to fight!]"
               return
             end

             # Attack the opponent
             your_hit = rand( strength + weapon )
             puts "[You hit with #{ your_hit } points of damage!]"
             enemy.hit( your_hit )

             # Retaliation
             p enemy
             if enemy.life > 0
               enemy_hit = rand( enemy.strength + enemy.weapon )
               puts "[Your enemy hit with #{ enemy_hit } points of damage!]"
               self.hit( enemy_hit )
             end
           end

         end

         class DwemthysArray < Array
           alias _inspect inspect
           def inspect; "#<#{ self.class }#{ _inspect }>"; end
           def method_missing( meth, *args )
             answer = first.send( meth, *args )
             if first.life <= 0
               shift
               if empty?
                 puts "[Whoa.  You decimated Dwemthy's Array!]"
               else
                 puts "[Get ready. #{ first.class } has emerged.]"
               end
             end
             answer || 0
           end
         end
        </pre>


        This code adds two methods to @Creature@.  The @hit@ method which reacts to a hit from another
        @Creature@.  And the @fight@ method which lets you place your own blows against that @Creature@.


        When your @Creature@ takes a hit, a bit of defense kicks in and your @charisma@ value is used to generate a power-up.  Don't
        ask me to explain the secrets behind this phenomenon.  A random number is picked, some simple math
        is done, and, if you're lucky, you get a couple life points.  @@life += p_up / 4@.


        Then, the enemy's blow is landed.  @@life -= damage@.  That's how the @Creature#hit@ method works.


        The @fight@ method checks to see if your @Creature@ is alive.  Next, a random
        hit is placed on your opponent.  If your opponent lives through the hit, it gets
        a chance to strike back.  Those are the workings of the @Creature#fight@ method.


        I'll explain @DwemthysArray@ in a second.  I really will.  I'm having fun doing it.
        Let's stick with hitting and fighting for now.


        h3. Introducing: You.


        You may certainly tinker with derivations on this rabbit.  But official
        Dwemthy Paradigms explicitly denote the code -- and the altogether character -- inscribed
        below.  *Save this as @rabbit.rb@.*


        <pre>
         class Rabbit < Creature
           traits :bombs

           life 10
           strength 2
           charisma 44
           weapon 4
           bombs 3

           # little boomerang
           def ^( enemy )
             fight( enemy, 13 )
           end
           # the hero's sword is unlimited!!
           def /( enemy )
             fight( enemy, rand( 4 + ( ( enemy.life % 10 ) ** 2 ) ) )
           end
           # lettuce will build your strength and extra ruffage
           # will fly in the face of your opponent!!
           def %( enemy )
             lettuce = rand( charisma )
             puts "[Healthy lettuce gives you #{ lettuce } life points!!]"
             @life += lettuce
             fight( enemy, 0 )
           end
           # bombs, but you only have three!!
           def *( enemy )
             if @bombs.zero?
               puts "[UHN!! You're out of bombs!!]"
               return
             end
             @bombs -= 1
             fight( enemy, 86 )
           end
         end
        </pre>


        You have four weapons.  The boomerang.  The hero's sword.  The lettuce.  And the bombs.


        To start off, open up @irb@ and load the libraries we've created above.


        <pre>
         irb> require 'dwemthy'
         irb> require 'rabbit'
        </pre>

         
        Now, unroll yourself.


        <pre>
         irb> r = Rabbit.new
         irb> r.life
           => 10
         irb> r.strength
           => 2
        </pre>


        Good, good.


        h3. Rabbit Fights ScubaArgentine!


        You cannot just go rushing into Dwemthy's Array, unseatbelted and merely
        perfumed!!  You must advance deliberately through the demonic cotillion.  Or south,
        through the thickets and labyrinth of coal.


        For now, let's lurk covertly through the milky residue alongside the aqueducts.  And 
        sneak up on the @ScubaArgentine@.


        <pre>
         class ScubaArgentine < Creature
           life 46
           strength 35
           charisma 91
           weapon 2
         end
        </pre>


        To get the fight started, make sure you've created one of you and one of the
        @ScubaArgentine@.


        <pre>
         irb> r = Rabbit.new
         irb> s = ScubaArgentine.new
        </pre>


        Now use the little boomerang!


        <pre>
         irb> r ^ s
         [You hit with 2 points of damage!]
         #<ScubaArgentine:0x808c864 @charisma=91, @strength=35, @life=44, @weapon=2>
         [Your enemy hit with 28 points of damage!]
         [Rabbit has died.]
        </pre>


        For crying out loud!!  Our sample rabbit died!!


