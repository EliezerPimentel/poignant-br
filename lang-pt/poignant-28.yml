    - Pequeno e Quase Sem Valor: >

        !i/blix-1.gif(Law-va.)!


        O hotel aqui em Ambrose não é nem um pouco bom.  As camas são todas tortas.
        O elevador é minúsculo.  Um cara pôs toda sua bagagem no elevador e não sobrou
        mais lugar pra ele.  Ele apertou o botão e as perseguiu pelas escadas.
        Mas as escadas eram muito estreitas e ele ficou entalado tentando subir.  


        Os mini-sabonetes que eles te dão são de tamanho gnomo, então é impossível
        fazer uma espuma.  Eu odeio isso.  Toda hora eu confundo eles com lentes de contato.


        Eu abri a torneira e nada saiu.  O caso é o seguinte: Ambrose é um
        lugar com propriedades mágicas, então eu me arrisquei.  Coloquei minha mão embaixo
        torneira.  Invisible, warm wetness.  Eu senti a sensação de água corrente,
        passando pelos meus dedos.  Quando tirei minha mão de lá,
        elas estavam secas e limpas.


        Foi um incrível experiência de vazio total.  Foi como @nil@.


        h3. Nil (Nada)


        No Ruby, o @nil@ representa o vazio.  Ele representa *falta de valor*.  Ele não é zero.
        Zero é um número.  


        É um morto-vivo do Ruby, uma palavra chave falecida.  Você não pode adicionar à ele,
        ele não evolui.  Mas ele é terrivelmente popular.  É este esqueleto sorrindo nas fotos.


        bq. @copo_plastico = nil@


        No código acima @copo_plastico@ está *vazio*.  Você pode argumentar que o @copo_plastico@
        contém algo, um @nil@.  O @nil@ representa vazio, logo, então,
        adiante-se e chame-o de vazio.


        Alguns de vocês que já programaram antes estarão tentados a dizer que @copo_plastico@ está
        *indefinido* (undefined).  Que tal não.  Quando você diz que uma variável está indefinida,
        você está dizendo que o Ruby simplesmente não tem lembrança da variável, ele não a conhece, 
        ela absolutamente não existe.


        Mas o Ruby está sabendo do @copo_plastico@.  Ruby pode facilmente olhar dentro do @copo_plastico@.
        Está *vazio*, mas não está *indefinido*.


        h3. False (Falso)


        !<i/blix-neg.gif(Forma de um gato.)!


        _The cat Trady Blix.  Frozen in emptiness.  Immaculate whiskers rigid.  Placid
        eyes of lake.  Tail of warm icicle.  Sponsored by a Very Powerful Pause Button._


        A escuridão que circunda o Blix pode ser chamada de *espaço negativo*.  Atente-se nessa frase.
        Deixe ela sugerir que o vazio tem conotação negativa.  De um jeito similar,
        @nil@ tem a slightly sour note that it whistles.


        Generalizando, *tudo no Ruby tem uma carga positiva*.  Esta fagulha
        corre por strings, números, regexps, todos eles.  Somente duas palavras reservadas vestem uma
        capa sombria: @nil@ e @false@ nos trazendo pra baixo.


        Você pode *testar essa carga* com a palavra chave @if@.  Ela se parece muito como
        o bloco @do@ que vimos no último capítulo, no qual ambas terminal com um @end@.


        <pre>
         if copo_plastico
           print "O copo de plástico tá até transbordando!"
         end
        </pre>


        Se @copo_plastico@ conter @nil@ ou @false@, você não vai ver nada impresso
        na tela.  Eles não estão na lista de convidados do @if@.  Então o @if@ não vai rodar
        nada do código que ele está protegendo.


        Mas @nil@ e @false@ não precisam ir embora constrangidos.  O caráter deles pode ser meio
        questionável, mas o @unless@ gerencia uma estabelecimento que preza ser fuleiro.
        A palavra chave @unless@ tem por regra *só deixar aqueles com carga negativa entrar*.
        Aqueles são: @nil@ e @false@.
        

        <pre>
         unless copo_plastico
           print "Tá na hora de abastecer o copo plástico."
         end
        </pre>


        Você também pode usar @if@ e @unless@ no *fim de uma linha de código*, se apenas
        aquela linha estiver sendo protegida.


        <pre>
         print "Yeah, o copo tá cheio de novo!" if copo_plastico
         print "Dificilmente. Ele tá vazio." unless copo_plastico
        </pre>


        E mais uma manha: empilhar o @if@ e @unless@.


        <pre>
         print "Estamos usando copos de plástico pois não temos de vidro." if copo_plastico unless copo_vidro
        </pre>


        Esta manha é um lindo jeito de expressar: _Faça isso só se *a* for true e *b* não for true_.


        Agora que você já conheceu o @false@, Tenho certeza que você pode ver o que vem em seguida.

