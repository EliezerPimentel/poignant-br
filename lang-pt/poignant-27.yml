    - >
        Nãnãnã.  Pera um segundo.  You're not ready for what the Elf here is doing in his caves.
        You'll think it's all positively inhumane, naughty, sick, tweeested, yada yada.


        h3.  Now You're Going to Hear the Animal Perfect Mission Statement Because This Is A
        Book And We Have Time And No Rush, Right?


        Back, back, way back before speedboats, I owned a prize race horse who took a stumble on 
        the track.  She did ten front flips and crashed into a guy who was carrying a full jar 
        of mayonnaisse.  We had blood and mayonnaisse up and down the track.  Needless to say, 
        she was a disaster.


        The vet took one look at her and swore she'd never walk again.  Her legs were gone and
        the vet wouldn't allow a legless horse to just sit around.  We'd need to put her down.  
        He swore his life and career on it, insisting we divide into two parallel lines.  The people 
        who could not refute the doctor's claims on one side; those too stubborn to accept his 
        infallable medical reasoning on the other.  The Elf, his pet ham, and I were the only 
        ones in that second line.


        So while the others heaped up trophies and great wreaths around the horse, bidding it a 
        fond farewell before the bullet came to take him home, the Elf and I frantically pawed the Internet for 
        answers.  We took matter into our own hands, cauterizing her leg wounds with live crawdads.  
        It worked great!  We now had a horse again.   Or at least: a horse body with a crustaceous abdominal
        frosting.  


        She scurried everywhere after that and lived for years in pleasantly moist underground cavities.


        Animal Perfect is now the future of animal enhancement.  They build new animals and salvage 
        old-style animals for parts.  Of course, they've come a long ways.
        When Animal Perfect started, you'd see a full-grown bear walk into Animal Perfect and you'd
        see a full-grown bear with sunglasses walk out.  Completely cheesy.


        Stick around and you'll see a crab with _his own jet pack_.  That's a new 2004 model jetcrab.


        But now, the whole operation is up and running.  And the cleanliness of the place is astonishing.
        All the equipment is so shiny.  Everything is in chrome.  Oh, and all the staff have concealed
        weapons.  They're trained to kill anyone who enters unannounced.  Or, if they run out of bullets,
        they're trained to pistol whip anyone who enters unannounced.


        Elfo, me faça um macacoestrela.


        !i/the.elf-5a.jpg(Primeiro, a estrela é capturada.)!


        Um pouco de Ruby imaginário pra você:


        bq. @tubo.pegue_uma_estrela@
        
        
        Variável @tubo@.  Método @pegue_uma_estrela@.  Muitos Rubistas gostam de pensar em métodos como mensagem.
        A quem vier antes do método é dada a mensagem.  O código acima diz ao @tubo@ que
        @pegue_uma_estrela@.


        Esta é a *segunda metade* do Ruby.  Colocar as coisas em movimento.  Estas coisas que você define e cria
        na primeira metade começam a _agir_ na segunda metade.


        # Defining things.

        # Putting those things into action.


        Então e se o código de pegar estrelas funcionar?  Pra onde a estrela vai?


        bq. @estrela_presa = pipe.pegue_uma_estrela@


        Veja, você que deve coletar a miserável, estrelinha.  Se você nao o fizer, ela vai simplesmente desaparecer.
        Toa vez que você usa um método, você recebe algo de volta.  Você pode ignorá-lo ou usá-lo.


        _Se você conseguir aprender a usar as respostas que os métodos de dão, então você irá *dominar*._


        !i/the.elf-5b.jpg(Star is ratcheted to the monkey's face.)!


        Rapidamente então.


        bq. @macacoestrela = ratchet.attach( macaco_preso, estrela_presa )@


        The @ratchet@ gets an @attach@ message.  What needs to be attached?  The _method arguments_: the
        @macaco_preso@ e a @estrela_presa@.  É nos dada de volta um @macacoestrela@, which we have
        decided to hang on to.


        !i/the.elf-5c.gif(Frog on the hand.)!


        This is turning out to be such a short, little proggie that I'm just going to put it
        all together as one statement.


        bq. @starmonkey = ratchet.attach( captive_monkey, pipe.pegue_uma_estrela ) + deco_hand_frog@


        See how @pipe.pegue_uma_estrela@ is right in the arguments for the method?  The caught 
        star will get passed right to the ratchet.  No need to find a place to put it.  Just
        let it go.


